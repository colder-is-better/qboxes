#!/bin/bash

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)

bold=$(tput bold)
regular=$(tput sgr0)

show_usage() {
	case "$1" in
		activate)
			printf "COMMAND NAME\n"
			printf "  activate - bring inactive VMs up\n\n"
			printf "SYNOPSIS\n"
			printf "  activate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Power one or more inactive VMs up\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes activate leap423 sles11sp4%s\n\n" "$bold" "$regular"
			exit 1
		;;
		annihilate)
			printf "COMMAND NAME\n"
			printf "  annihilate - remove any trace of inactive VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  annihilate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Undefine one or more inactive VMs, delete all snapshots and"
			printf " associated storage volumes (%sthink TWICE before annihilating%s)\n\n" "$red" "$regular"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes annihilate guest_{1..5}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		attach)
			printf "COMMAND NAME\n"
			printf "  attach - attach storage volumes to (in)active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  attach --name=<volume_name> --size=<capacity_in_GiB> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create sparse QCOW2 files in specified pool, attach them as virtual"
			printf " hard drives to (in)active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes attach --name=data --size=4096 --pool=lab osd_node_{1,2,3}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		check-service)
			printf "COMMAND NAME\n"
			printf "  check-service - attempt to connect to specified TCP port of one or more active VMs\n\n"
			printf "SYNOPSIS\n";
			printf "  check-service --port=<tcp_port> <active_VM_1> ... <active_VM_k>\n\n";
			printf "DESCRIPTION\n";
			printf "  Check if one or more active VMs are reachable via specificied TCP port\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes check-service --port=22 smt-server master%s\n\n" "$bold" "$regular"
			exit 1
		;;
		clone)
			printf "COMMAND NAME\n"
			printf "  clone - clone a template VM into one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  clone --template=<VM_0> --target-pool=<pool_name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Clone an existing inactive template VM into one or more new VMs, indicate"
			printf " a target storage pool for the cloned volumes\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes clone --template=sles12sp3 --target-pool=services" "$bold"
			printf " www-srv-1 www-srv-2 balancer%s\n\n" "$regular"
			exit 1
		;;
		deactivate)
			printf "COMMAND NAME\n"
			printf "  deactivate - shutdown active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  deactivate <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Try to gracefully shutdown one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes deactivate leap423%s\n\n" "$bold" "$regular"
			exit 1
		;;
		define)
			printf "COMMAND NAME\n"
			printf "  define - define one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  define --ram=<size_in_MiB> --cores=<count> --volume-size=<capacity_in_GiB>"
			printf " --network=<name> --guest-os=<os_variant> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Define one or more VMs according to specifications, do not install a guest"
			printf " OS on any of them\n"
			printf "  (Tip: Type %sosinfo-query os%s for a list of all the supported OS variants)\n\n" "$bold" "$regular"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes define --ram=2048 --cores=2 --volume-size=256 --network=default" "$bold"
			printf " --guest-os=opensuse42.3 --pool=ceph osd{1..5}%s\n\n" "$regular"
			exit 1
		;;
		getmac)
			printf "COMMAND NAME\n"
			printf "  getmac - reveal MAC addresses\n\n"
			printf "SYNOPSIS\n"
			printf "  getmac <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Reveal the first Ethernet adapter's MAC address of one or more (in)active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes getmac sles12sp{1,2,3}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		ping)
			printf "COMMAND NAME\n"
			printf "  ping - send ICMP packets to active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  ping --count=<number_of_packets> <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Send a specified number of ICMP packets to one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes ping --count=3 sles12sp2 sles12sp3%s\n\n" "$bold" "$regular"
			exit 1
		;;
		reboot)
			printf "COMMAND NAME\n";
			printf "  reboot - restart active VMs\n\n";
			printf "SYNOPSIS\n";
			printf "  reboot <active_VM_1> ... <active_VM_k>\n\n";
			printf "DESCRIPTION\n";
			printf "  Try to gracefully restart one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~/bin> %sqboxes reboot sles12sp3%s\n\n" "$bold" "$regular"
			exit 1
		;;
		*)
			printf "\nThis is %sqboxes%s, a simple command line tool" "$green" "$regular"
			printf " for managing local QEMU/KVM VMs.\n"
			printf "Currently the following commands are implemented:\n\n"
			printf "  activate\t: bring inactive VMs up\n"
			printf "  annihilate\t: remove any trace of inactive VMs\n"
			printf "  attach\t: attach storage volumes to (in)active VMs\n"
			printf "  check-service\t: attempt to connect to specified TCP port of one or more active VMs\n"
			printf "  clone\t\t: clone a template VM into one or more new VMs\n"
			printf "  deactivate\t: shutdown active VMs\n"
			printf "  define\t: define one or more new VMs\n"
			printf "  getmac\t: reveal MAC addresses\n"
			printf "  ping\t\t: send ICMP packets to active VMs\n"
			printf "  reboot\t: restart active VMs\n\n"
			printf "  help\t\t: display this summary of commands\n\n"
			printf "Type %sqboxes command-name%s for the syntax" "$green" "$regular"
			printf " and a usage example of a specific command.\n\n"
			exit 1
		;;
	esac
}

is_name_valid() {
	the_name="$1"
	first_char_test=$(echo "${the_name:0:1}" | tr -d "[:alnum:]")
	if [ -n "$first_char_test" ]; then
		return 0
	else
		valid_name_test=$(echo "$the_name" | tr -d "[:alnum:]-_.")
		if [ -n "$valid_name_test" ]; then
			return 0
		else
			return 1
		fi
	fi
}

is_number_valid() {
	the_number="$1"
	valid_number_test=$(echo "$the_number" | tr -d "[:digit:]")
	if [ -n "$valid_number_test" ]; then
		return 0
	else
		return 1
	fi
}

is_a_member() {
	item="$1"
	the_set="$2"
	included=0
	for each_one in $the_set; do
		if [ $item == $each_one ]; then
			included=1
			break
		fi
	done
	return $included
}

activate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage activate
	fi

	all_inactive_VMs=$(virsh list --name --inactive)
	if [ -z "$all_inactive_VMs" ]; then
		printf "\n%scannot seem to find a single inactive VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage activate
	fi

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_inactive_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' does not look like an inactive VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%spowering up %s%s\n" "$green" "$candidate" "$regular"
				virsh --quiet start "$candidate"
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d%s\n" "$yellow" $virsh_ec "$regular"
				else
					sleep 1
				fi
			fi
		fi
	done
}

annihilate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage annihilate
	fi

	all_inactive_VMs=$(virsh list --name --inactive)
	if [ -z "$all_inactive_VMs" ]; then
		printf "\n%scannot seem to find a single inactive VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage annihilate
	fi

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_inactive_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' does not look like an inactive VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%sannihilating %s (this may take a while)%s\n" "$green" "$candidate" "$regular"
				all_snapshots=$(virsh snapshot-list --name "$candidate")
				if [ -n "$all_snapshots" ]; then
					for each_one in $all_snapshots; do
						printf "  %sdeleting snapshot '%s'%s\n" "$green" "$each_one" "$regular"
						virsh --quiet snapshot-delete --domain "$candidate" --snapshotname "$each_one"
						virsh_ec=$?
						if [ $virsh_ec -ne 0 ]; then
							printf \
							"%sfailed to delete snapshot '%s' of %s, virsh returned error code %d, terminating now%s\n" \
								"$red" "$each_one" "$candidate" $virsh_ec "$regular"
							exit 2
						fi
					done
				fi
				virsh --quiet undefine "$candidate" --remove-all-storage --wipe-storage
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi
			fi
		fi
	done
}

attach_cmd() {
	lowest_num_args=4
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage attach
	fi

	volume_name=""
	volume_size=""
	pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--name)
				if [ -z "$value" ]; then
					printf "%svolume name not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid volume name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_name=$value
			;;
			--size)
				if [ -z "$value" ]; then
					printf "%svolume size not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_number_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_size_min=128
				volume_size_max=8192
				if [ $value -lt $volume_size_min ] \
					|| [ $value -gt $volume_size_max ] \
					|| [ $((value % volume_size_min)) -gt 0 ]; then
					printf "%svolume size must be between %d and %d GiB inclusive, and an integer multiple of %d%s\n" \
						"$red" $volume_size_min $volume_size_max $volume_size_min "$regular"
					exit 1
				fi
				volume_size=$value
			;;
			--pool)
				if [ -z "$value" ]; then
					printf "%spool name not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				pool_name=$value
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage attach
			;;
		esac
		shift
	done

	if [ -z "$volume_name" ] \
		|| [ -z "$volume_size" ] \
		|| [ -z "$pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage attach
	fi

	all_VMs=$(virsh list --name --all)
	if [ -z "$all_VMs" ]; then
		printf "\n%scannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage attach
	fi

	pool_path=$(virsh pool-dumpxml "$pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' does not look like a VM%s\n" "$yellow" "$candidate" "$regular"
			else
				virtio_dev=""
				devices_taken=$(virsh dumpxml "$candidate" | grep "<target dev='" \
					| awk -F "<target dev='" '{ print $2 }'  | awk -F "' bus='" '{ print $1 }')

				for letter in {a..z}; do
					device_name=vd"$letter"
					is_a_member "$device_name" "$devices_taken"
					what_is_it=$?
					if [ $what_is_it -eq 0 ]; then
						virtio_dev="$device_name"
						break
					fi
				done

				if [ "$virtio_dev" == "" ]; then
					printf "%sthere seems to be a shortage of VirtIO storage device names for '%s'%s\n" "$yellow" "$candidate" "$regular"
				else
					qcow2_name="$candidate"_"$virtio_dev"_"$volume_name"_"$volume_size".qcow2
					qcow2_path="$pool_path"/"$qcow2_name"

					printf "%screating QCOW2 image %s for %s%s\n" "$green" "$qcow2_name" "$candidate" "$regular"

					virsh --quiet vol-create-as "$pool_name" --name "$qcow2_name" \
						--capacity "$volume_size"G --format qcow2
					virsh_ec=$?
					if [ $virsh_ec -ne 0 ]; then
						printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
						exit 2
					fi

					printf "%sattaching %s to %s%s\n\n" "$green" "$qcow2_name" "$candidate" "$regular"

					virsh --quiet attach-disk "$candidate" "$qcow2_path" "$virtio_dev" \
						--driver qemu --subdriver qcow2 --targetbus virtio --persistent
					virsh_ec=$?
					if [ $virsh_ec -ne 0 ]; then
						printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
						exit 2
					fi
				fi
			fi
		fi
	done
}

checkservice_cmd() {
	lowest_num_args=2
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" "$lowest_num_args" "$regular"
		show_usage check-service
	fi

	param=$(echo "$1" | awk -F= '{print $1}')
	value=$(echo "$1" | awk -F= '{print $2}')

	if [ "$param" != "--port" ]; then
		printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
		show_usage check-service
	fi

	if [ -z "$value" ]; then
		printf "%sTCP port not specified%s\n" "$red" "$regular"
		exit 1
	fi

	is_number_valid "$value"
	what_is_it=$?
	if [ $what_is_it -eq 0 ]; then
		printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
		exit 1
	fi

	if [ $value -lt 1 ] || [ $value -gt 65535 ]; then
		printf "%sTCP port number must be between 1 and 65535 inclusive%s\n" "$red" "$regular"
		exit 1
	fi

	tcp_port=$value

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage check-service
	fi

	shift

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				nc -z -w 1 "$candidate" "$tcp_port" > /dev/null 2>&1
				netcat_ec=$?
				if [ $netcat_ec -eq 0 ]; then
					printf "%s%s is accepting packets on port %d/TCP%s\n" "$green" "$candidate" "$tcp_port" "$regular"
				else
					printf "%s%s is not accepting packets on port %d/TCP%s\n" "$red" "$candidate" "$tcp_port" "$regular"
				fi
			fi
		fi
	done
}

clone_cmd() {
	lowest_num_args=3
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage clone
	fi

	template_VM=""
	clone_pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--template)
				if [ -z "$value" ]; then
					printf "%stemplate name not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid template name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_inactive_VMs=$(virsh list --name --inactive)
				is_a_member "$value" "$all_inactive_VMs"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%stemplate should be an existing inactive VM%s\n" "$red" "$regular"
					exit 1
				fi
				template_VM=$value
			;;
			--target-pool)
				if [ -z "$value" ]; then
					printf "%starget pool not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				clone_pool_name=$value
				;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage clone
			;;
		esac
		shift
	done

	if [ -z "$template_VM" ] || [ -z "$clone_pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage clone
	fi

	template_pool_name=""
	template_pool_path=""
	template_volume_path=$(virsh dumpxml "$template_VM" \
		| grep "<source file='" \
		| awk -F "='" '{ print $2 }' \
		| awk -F "'/>" '{ print $1 }')

	for pool in $all_active_pools; do
		volumes_in_pool=$(virsh vol-list "$pool")
		template_volume_in_list=$(echo "$volumes_in_pool" | grep "$template_volume_path")
		if [ -n "$template_volume_in_list" ]; then
			template_pool_name=$pool
			template_pool_path=$(virsh pool-dumpxml "$pool" \
				| grep "<path>" \
				| awk -F "<path>" '{ print $2 }' \
				| awk -F "</path>" '{ print $1 }')
			all_active_pools=""
		fi
	done

	all_VMs=$(virsh list --name --all)

	template_volume_name=$(echo "$template_volume_path" \
		| awk -F "${template_pool_path}/" '{ print $2 }')
	clone_pool_path=$(virsh pool-dumpxml "$clone_pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 1 ]; then
				printf "%sthere is already a VM '%s', so I am skipping that one%s\n" "$yellow" "$candidate" "$regular"
			else
				clone_volume_name="$candidate".qcow2

				printf "%scloning %s into %s%s\n" "$green" "$template_volume_name" "$clone_volume_name" "$regular"

				virsh --quiet vol-clone --pool "$template_pool_name" "$template_volume_name" "$clone_volume_name"
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi

				if [ "$template_pool_path" != "$clone_pool_path" ]; then
					printf "%smoving %s between pools (%s ==> %s)%s\n" \
						"$green" "$clone_volume_name" "$template_pool_name" "$clone_pool_name" "$regular"

					sudo mv "$template_pool_path"/"$clone_volume_name" "$clone_pool_path"/
					sudo_ec=$?
					if [ $sudo_ec -ne 0 ]; then
						printf "%soperation failed, mv returned error code %d, terminating now%s\n" "$red" $sudo_ec "$regular"
						exit 2
					fi

					virsh --quiet pool-refresh "$template_pool_name"
					virsh --quiet pool-refresh "$clone_pool_name"
				fi

				printf "%scloning %s into %s and attaching %s to it%s\n" \
					"$green" "$template_VM" "$candidate" "$clone_volume_name" "$regular"

				virt-clone --quiet -o "$template_VM" -n "$candidate" \
					--preserve-data -f "$clone_pool_path"/"$clone_volume_name"
				virt_clone_ec=$?
				if [ $virt_clone_ec -ne 0 ]; then
					printf "%soperation failed, virt-clone returned error code %d, terminating now%s\n" \
						"$red" $virt_clone_ec "$regular"
					exit 2
				fi

				printf "%ssetting hostname for %s (this may take a while)%s\n" \
					"$green" "$candidate" "$regular"

				sudo virt-customize --quiet -d "$candidate" --hostname "$candidate"
				virt_customize_ec=$?
				if [ $virt_customize_ec -ne 0 ]; then
					printf "%soperation failed, virt-customize returned error code %d, terminating now%s\n" \
						"$red" $virt_customize_ec "$regular"
					exit 2
				fi

				printf "%sdeleting SSH host keys from %s (this may take a while)%s\n\n" "$green" "$candidate" "$regular"

				sudo virt-customize --quiet -d "$candidate" \
					--delete /etc/ssh/ssh_host_dsa_key \
					--delete /etc/ssh/ssh_host_dsa_key.pub \
					--delete /etc/ssh/ssh_host_ecdsa_key \
					--delete /etc/ssh/ssh_host_ecdsa_key.pub \
					--delete /etc/ssh/ssh_host_ed25519_key \
					--delete /etc/ssh/ssh_host_ed25519_key.pub \
					--delete /etc/ssh/ssh_host_key \
					--delete /etc/ssh/ssh_host_key.pub \
					--delete /etc/ssh/ssh_host_rsa_key \
					--delete /etc/ssh/ssh_host_rsa_key.pub

				virt_customize_ec=$?
				if [ $virt_customize_ec -ne 0 ]; then
					printf "%soperation failed, virt-customize returned error code %d, terminating now%s\n" \
						"$red" $virt_customize_ec "$regular"
					exit 2
				fi
			fi
		fi
	done
}

deactivate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" \
			"$red" $lowest_num_args "$regular"
		show_usage deactivate
	fi

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage deactivate
	fi

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%sshutting down %s%s\n" "$green" "$candidate" "$regular"

				virsh --quiet shutdown $candidate
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi
				sleep 1
			fi
		fi
	done
}

define_cmd() {
	lowest_num_args=7
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage define
	fi

	memory_size=""
	cpu_cores=""
	volume_size=""
	libvirt_network=""
	os_variant=""
	pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--ram)
				if [ -z "$value" ]; then
					printf "%smemory size not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_number_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				memory_size_min=32
				memory_size_max=16384
				if [ $value -lt $memory_size_min ] \
					|| [ $value -gt $memory_size_max ] \
					|| [ $((value % memory_size_min)) -gt 0 ]; then
					printf "%smemory size must be between %d and %d MiB inclusive, and an integer multiple of %d%s\n" \
					"$red" $memory_size_min $memory_size_max $memory_size_min "$regular"
					exit 1
				fi
				memory_size=$value
			;;
			--cores)
				if [ -z "$value" ]; then
					printf "%snumber of CPU cores not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_number_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				cpu_cores_max=$(virsh nodeinfo | grep "CPU(s):" | awk -F ":" '{ print $2 }')
				if [ $value -lt 1 ] || [ $value -gt $cpu_cores_max ]; then
					printf "%snumber of CPU cores should be between 1 and %d inclusive%s\n" "$red" "$cpu_cores_max" "$regular"
					exit 1
				fi
				cpu_cores=$value
			;;
			--volume-size)
				if [ -z "$value" ]; then
					printf "%svolume size not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_number_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_size_min=16
				volume_size_max=512
				if [ $value -lt $volume_size_min ] \
					|| [ $value -gt $volume_size_max ] \
					|| [ $((value % volume_size_min)) -gt 0 ]; then
					printf "%svolume size must be between %d and %d GiB inclusive, and an integer multiple of %d%s\n" \
						"$red" $volume_size_min $volume_size_max $volume_size_min "$regular"
					exit 1
				fi
				volume_size=$value
			;;
			--network)
				if [ -z "$value" ]; then
					printf "%snetwork name not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid network name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_networks=$(virsh net-list --name)
				is_a_member "$value" "$all_active_networks"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%sI cannot seem to find network %s%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				libvirt_network=$value
			;;
			--guest-os)
				if [ -z "$value" ]; then
					printf "%sOS variant not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid OS variant name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_os_variants=$(osinfo-query os -f short-id)
				is_a_member "$value" "$all_os_variants"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%sunknown OS variant '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				os_variant=$value
			;;
			--pool)
				if [ -z "$value" ]; then
					printf "%spool name not specified%s\n" "$red" "$regular"
					exit 1
				fi
				is_name_valid "$value"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				what_is_it=$?
				if [ $what_is_it -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				pool_name=$value
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage define
			;;
		esac
		shift
	done

	if [ -z "$memory_size" ] \
		|| [ -z "$cpu_cores" ] \
		|| [ -z "$volume_size" ] \
		|| [ -z "$libvirt_network" ] \
		|| [ -z "$os_variant" ] \
		|| [ -z "$pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage define
	fi

	all_VMs=$(virsh list --name --all)
	pool_path=$(virsh pool-dumpxml "$pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 1 ]; then
				printf "%sthere is already a VM '%s', so I am skipping that one%s\n" "$yellow" "$candidate" "$regular"
			else
				random_alphanum=$(strings /dev/urandom \
					| grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n')
				xml_path="$candidate"_"$random_alphanum".xml
				qcow2_name="$candidate".qcow2
				qcow2_path="$pool_path"/"$qcow2_name"

				printf "%screating volume %s for %s%s\n" \
					"$green" "$qcow2_name" "$candidate" "$regular"

				virsh --quiet vol-create-as "$pool_name" --name "$qcow2_name" --capacity "$volume_size"G --format qcow2
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi

				printf "%scoming up with a detailed XML description of %s%s\n" "$green" "$candidate" "$regular"

				virt-install --quiet --name "$candidate" --os-variant "$os_variant" \
					--memory "$memory_size" --cpu host --vcpus="$cpu_cores" \
					--network network="$libvirt_network",model=virtio \
					--disk "$qcow2_path",bus=virtio --boot network,hd \
					--print-xml 1 > ~/"$xml_path"
				virt_install_ec=$?
				if [ $virt_install_ec -ne 0 ]; then
					printf "%soperation failed, virt-install returned error code %d, terminating now%s\n" \
						"$red" $virt_install_ec "$regular"
					rm -f ~/"$xml_path"
					exit 2
				fi

				printf "%sretracting sound card & tablet input devices from XML description%s\n" "$green" "$regular"

				sed -i /"<sound model"/d ~/"$xml_path"
				sed -i /'<input type="tablet'/d ~/"$xml_path"

				printf "%sdefining %s%s\n\n" "$green" "$candidate" "$regular"

				virsh --quiet define ~/"$xml_path" --validate
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					rm -f ~/"$xml_path"
					exit 2
				fi
				rm -f ~/"$xml_path"
			fi
		fi
	done
}

getmac_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage getmac
	fi

	all_VMs=$(virsh list --name --all)
	if [ -z "$all_VMs" ]; then
		printf "\n%scannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage getmac
	fi

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%scannot seem to find VM '%s'%s\n" "$yellow" "$candidate" "$regular"
			else
				mac_addr=$(virsh --quiet dumpxml "$candidate" | grep "mac address" \
					| awk -F "<mac address='" '{ print $2 }' | awk -F "'/>" '{ print $1 }')
				printf "%s%s looks like %s in the local network%s\n" "$green" "$candidate" "$mac_addr" "$regular"
			fi
		fi
	done
}

ping_cmd() {
	lowest_num_args=2
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage ping
	fi

	param=$(echo "$1" | awk -F= '{print $1}')
	value=$(echo "$1" | awk -F= '{print $2}')

	if [ "$param" != "--count" ]; then
		printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
		show_usage ping
	fi

	if [ -z "$value" ]; then
		printf "%snumber of packets not specified%s\n" "$red" "$regular"
		exit 1
	fi

	is_number_valid "$value"
	what_is_it=$?
	if [ $what_is_it -eq 0 ]; then
		printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
		exit 1
	fi

	count_min=1
	count_max=64

	if [ $value -lt $count_min ] || [ $value -gt $count_max ]; then
		printf "%spacket count should be between %d and %d inclusive%s\n" "$red" $count_min $count_max "$regular"
		exit 1
	fi

	n_packets="$value"

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage ping
	fi

	shift

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s%s is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "\n%snow trying to ping %s%s\n" "$green" "$candidate" "$regular"
				/usr/bin/ping -q -c "$n_packets" "$candidate"
			fi
		fi
	done
}

reboot_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage reboot
	fi

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage reboot
	fi

	for candidate; do
		is_name_valid "$candidate"
		what_is_it=$?
		if [ $what_is_it -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			what_is_it=$?
			if [ $what_is_it -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%srebooting %s%s\n" "$green" "$candidate" "$regular"

				virsh --quiet reboot "$candidate";
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d%s\n" "$red" $virsh_ec "$regular"
				else
					sleep 1
				fi
			fi
		fi
	done
}

case "$1" in
	activate)
		shift
		activate_cmd "$@"
		;;
	annihilate)
		shift
		annihilate_cmd "$@"
		;;
	attach)
		shift
		attach_cmd "$@"
		;;
	check-service)
		shift
		checkservice_cmd "$@"
		;;
	clone)
		shift
		clone_cmd "$@"
		;;
	deactivate)
		shift
		deactivate_cmd "$@"
		;;
	define)
		shift
		define_cmd "$@"
		;;
	getmac)
		shift
		getmac_cmd "$@"
		;;
	ping)
		shift
		ping_cmd "$@"
		;;
	reboot)
		shift
		reboot_cmd "$@"
		;;
	*)
		show_usage help
		;;
esac
