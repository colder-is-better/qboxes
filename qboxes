#!/bin/bash

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)

bold=$(tput bold)
regular=$(tput sgr0)

# ---------------------------------------------------------------------------
# show_usage():
#   Displays general usage information,
#   Provides help on the syntax of each supported command
# ---------------------------------------------------------------------------

show_usage() {
	case "$1" in
		activate)
			printf "COMMAND NAME\n"
			printf "  activate - bring inactive VMs up\n\n"
			printf "SYNOPSIS\n"
			printf "  activate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Power one or more inactive VMs up\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes activate leap423 sles11sp4%s\n\n" "$bold" "$regular"
			exit 1
		;;
		annihilate)
			printf "COMMAND NAME\n"
			printf "  annihilate - remove any trace of inactive VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  annihilate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Undefine one or more inactive VMs, delete all snapshots and"
			printf " associated storage volumes (%sthink TWICE before annihilating%s)\n\n" "$red" "$regular"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes annihilate guest_{1..5}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		attach)
			printf "COMMAND NAME\n"
			printf "  attach - attach new storage volumes to (in)active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  attach --name=<volume_name> --size=<capacity_in_GiB> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create sparse QCOW2 files in specified pool, attach them as virtual"
			printf " hard drives to (in)active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes attach --name=data --size=4096 --pool=lab osd_node_{1,2,3}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		check-service)
			printf "COMMAND NAME\n"
			printf "  check-service - attempt to connect to specified TCP port of one or more active VMs\n\n"
			printf "SYNOPSIS\n";
			printf "  check-service --port=<tcp_port> <active_VM_1> ... <active_VM_k>\n\n";
			printf "DESCRIPTION\n";
			printf "  Check if one or more active VMs are reachable via specificied TCP port\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes check-service --port=22 smt-server master%s\n\n" "$bold" "$regular"
			exit 1
		;;
		clone)
			printf "COMMAND NAME\n"
			printf "  clone - clone a template VM into one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  clone --template=<VM_0> --target-pool=<pool_name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Clone an existing inactive template VM into one or more new VMs, indicate"
			printf " a target storage pool for the cloned volumes\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes clone --template=sles12sp3 --target-pool=services" "$bold"
			printf " www-srv-1 www-srv-2 balancer%s\n\n" "$regular"
			exit 1
		;;
		create)
			printf "COMMAND NAME\n"
			printf "  create - create a new libvirt entity\n\n"
			printf "SYNOPSIS\n"
			printf "  create <network|pool>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create a new libvirt entity, where \"entity\" may"
			printf " be any of these two strings: network, pool\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes create network --name=lvirtnet --domain=local.qbx --router=10.20.30.254" "$bold"
			printf " --netmask=255.255.255.0 --dhcp=on --from=10.20.30.100 --to=10.20.30.253%s\n\n" "$regular"
			printf "  ~> %sqboxes create pool --name=ceph --path=/usr/local/testing/storage-clusters%s\n\n" "$bold" "$regular"
			exit 1
		;;
		create_network)
			printf "COMMAND NAME & OBJECT\n"
			printf "  create network - create a new libvirt NATed network\n\n"
			printf "SYNOPSIS\n"
			printf "  create network --name=<net_name> --domain=<domain.name> --router=<router.ip.v4.address>"
			printf " --netmask=<netmask.ip.v4.addr> --dhcp=<on|off> [--from=<from.ip.v4.addr>] [--to=<to.ip.v4.addr>]\n\n"
			printf "DESCRIPTION\n"
			printf "  Create a new libvirt NATed network offering routing and DNS services,"
			printf " optionally DHCP service also\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes create network --name=localnet --domain=local.qbx --router=10.20.30.254" "$bold"
			printf " --netmask=255.255.255.0 --dhcp=on --from=10.20.30.100 --to=10.20.30.253%s\n\n" "$regular"
			exit 1
		;;
		create_pool)
			printf "COMMAND NAME & OBJECT\n"
			printf "  create pool - create a new libvirt storage pool\n\n"
			printf "SYNOPSIS\n"
			printf "  create pool --name=<pool_name> --path=<path_to_local_dir>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create a new storage pool with given name, under existing local path\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes create pool --name=ceph --path=/usr/local/testing/storage-clusters%s\n\n" "$bold" "$regular"
			exit 1
		;;
		deactivate)
			printf "COMMAND NAME\n"
			printf "  deactivate - shutdown active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  deactivate <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Try to gracefully shutdown one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes deactivate leap423%s\n\n" "$bold" "$regular"
			exit 1
		;;
		define)
			printf "COMMAND NAME\n"
			printf "  define - define one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  define --ram=<size_in_MiB> --cores=<count> --volume-size=<capacity_in_GiB>"
			printf " --network=<name> --guest-os=<os_variant> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Define one or more VMs according to specifications, do not install a guest"
			printf " OS on any of them\n"
			printf "  (Tip: Type %sosinfo-query os%s for a list of all the supported OS variants)\n\n" "$bold" "$regular"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes define --ram=2048 --cores=2 --volume-size=256 --network=default" "$bold"
			printf " --guest-os=opensuse42.3 --pool=ceph osd{1..5}%s\n\n" "$regular"
			exit 1
		;;
		getmac)
			printf "COMMAND NAME\n"
			printf "  getmac - reveal MAC addresses\n\n"
			printf "SYNOPSIS\n"
			printf "  getmac <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Reveal the first Ethernet adapter's MAC address of one or more (in)active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes getmac sles12sp{1,2,3}%s\n\n" "$bold" "$regular"
			exit 1
		;;
		list)
			printf "COMMAND NAME\n"
			printf "  list - present all available entities of given type\n\n"
			printf "SYNOPSIS\n"
			printf "  list <vm|network|pool|volume>\n\n"
			printf "DESCRIPTION\n"
			printf "  Present all available entities of given type, where \"type\""
			printf " may be any one of these: vm, network, pool, volume\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes list network%s\n\n" "$bold" "$regular"
			exit 1
		;;
		ping)
			printf "COMMAND NAME\n"
			printf "  ping - send ICMP packets to active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  ping --count=<number_of_packets> <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Send a specified number of ICMP packets to one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes ping --count=3 sles12sp2 sles12sp3%s\n\n" "$bold" "$regular"
			exit 1
		;;
		reboot)
			printf "COMMAND NAME\n";
			printf "  reboot - restart active VMs\n\n";
			printf "SYNOPSIS\n";
			printf "  reboot <active_VM_1> ... <active_VM_k>\n\n";
			printf "DESCRIPTION\n";
			printf "  Try to gracefully restart one or more active VMs\n\n"
			printf "%sEXAMPLE%s\n" "$bold" "$regular"
			printf "  ~> %sqboxes reboot sles12sp3%s\n\n" "$bold" "$regular"
			exit 1
		;;
		*)
			printf "\nThis is %sqboxes%s, a simple command line tool" "$green" "$regular"
			printf " for managing local QEMU/KVM VMs.\n"
			printf "Currently the following commands are implemented:\n\n"
			printf "  activate\t: bring inactive VMs up\n"
			printf "  annihilate\t: remove any trace of inactive VMs\n"
			printf "  attach\t: attach new storage volumes to (in)active VMs\n"
			printf "  check-service\t: try to connect to specified TCP port of one or more active VMs\n"
			printf "  clone\t\t: clone a template VM into one or more new VMs\n"
			printf "  create\t: create a new libvirt network or storage pool\n"
			printf "  deactivate\t: shutdown active VMs\n"
			printf "  define\t: define one or more new VMs\n"
			printf "  getmac\t: reveal MAC addresses\n"
			printf "  list\t\t: present all available VMs, libvirt networks, pools, or volumes\n"
			printf "  ping\t\t: send ICMP packets to active VMs\n"
			printf "  reboot\t: restart active VMs\n\n"
			printf "  help\t\t: display this summary of commands\n\n"
			printf "Type %sqboxes command-name%s for the syntax" "$green" "$regular"
			printf " and a usage example of a specific command.\n\n"
			exit 1
		;;
	esac
}

# ---------------------------------------------------------------------------
# is_name_valid():
#   Checks if given name is valid
#   A name is valid for qboxes if it comprises alphanumerics,
#   hyphens, underscores and dots only, does not start with
#   a hyphen and is between 1 and 63 characters long
# ---------------------------------------------------------------------------

is_name_valid() {
    the_name="$1"
    length=${#the_name}
    if [ "$length" -eq 0 ] || [ "$length" -gt 63 ] || [ ${the_name:0:1} == "-" ]; then
        return 0
    else
        valid_name_test=$(echo "$the_name" | tr -d "[:alnum:]-_.")
        if [ -n "$valid_name_test" ]; then
            return 0
        else
            return 1
        fi
    fi
}

# ---------------------------------------------------------------------------
# is_number_valid():
#   Checks if given number is valid
#   A number is valid for qboxes if it comprises numeric
#   characters only (no signs, commas, dots, units, or any other character) 
# ---------------------------------------------------------------------------

is_number_valid() {
	the_number="$1"
    if [ -z "$the_number" ]; then
        return 0
    else
	    valid_number_test=$(echo "$the_number" | tr -d "[:digit:]")
	    if [ -n "$valid_number_test" ]; then
		    return 0
	    else
		    return 1
	    fi
    fi
}

# ---------------------------------------------------------------------------
# is_ipv4_valid():
#   Checks if given string represents a valid IPv4 address
# ---------------------------------------------------------------------------

is_ipv4_valid() {
	the_address="$1"
	zero_to_255="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
	valid_ipv4_regex="$zero_to_255"\."$zero_to_255"\."$zero_to_255"\."$zero_to_255"
	valid_ipv4_test=$(echo "$the_address" | grep -x -E "$valid_ipv4_regex")
	if [ -z "$valid_ipv4_test" ]; then
		return 0
	else
		return 1
	fi
}

# ---------------------------------------------------------------------------
# is_a_member():
#   Checks if given string matches a member of a sequence of strings
# ---------------------------------------------------------------------------

is_a_member() {
	item="$1"
	the_set="$2"
	included=0
	for each_one in $the_set; do
		if [ "$item" == "$each_one" ]; then
			included=1
			break
		fi
	done
	return $included
}

# ---------------------------------------------------------------------------
# activate_cmd():
#   Powers up one or more inactive VMs
# ---------------------------------------------------------------------------

activate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage activate
	fi

	all_inactive_VMs=$(virsh list --name --inactive)
	if [ -z "$all_inactive_VMs" ]; then
		printf "\n%scannot seem to find a single inactive VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage activate
	fi

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_inactive_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' does not look like an inactive VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%spowering up %s%s\n" "$green" "$candidate" "$regular"
				virsh --quiet start "$candidate"
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d%s\n" "$yellow" $virsh_ec "$regular"
				else
					sleep 1
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# annihilate_cmd():
#   Undefines one or more inactive VMs,
#   deletes all associated storage volumes and snapshots
# ---------------------------------------------------------------------------

annihilate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage annihilate
	fi

	all_inactive_VMs=$(virsh list --name --inactive)
	if [ -z "$all_inactive_VMs" ]; then
		printf "\n%scannot seem to find a single inactive VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage annihilate
	fi

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_inactive_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' does not look like an inactive VM%s\n" "$yellow" "$candidate" "$regular"
			else
				user_known_hosts=~/.ssh/known_hosts
				if [ -e "$user_known_hosts" ]; then
					printf "%slooking for and removing entries related to " "$green"
					printf "%s from %s%s\n" "$candidate" "$user_known_hosts" "$regular"
					random_alphanum=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n')
					mkdir ~/"$random_alphanum"
					sudo virt-copy-out -d "$candidate" /etc/ssh/ssh_host_*_key.pub ~/"$random_alphanum"/ &>/dev/null 
					virt_copy_out_ec=$?
					if [ $virt_copy_out_ec -ne 0 ]; then
						printf "%scannot read host keys from %s, virt-copy-out " "$yellow" "$candidate"
						printf "returned error code %d%s\n" $virt_copy_out_ec "$regular"
					else
						for each_file in ~/"$random_alphanum"/*.pub; do
							host_key=$(awk -F " " '{ print $2 }' "$each_file" | awk -F " " '{ print $1 }')
							sed -i "/${host_key//\//\\/}/d" "$user_known_hosts"
						done
					fi
					rm -fr ~/"$random_alphanum"
				fi
				printf "%sannihilating %s%s\n" "$green" "$candidate" "$regular"
				all_snapshots=$(virsh snapshot-list --name "$candidate")
				if [ -n "$all_snapshots" ]; then
					for each_one in $all_snapshots; do
						printf "%sdeleting snapshot '%s'%s\n" "$green" "$each_one" "$regular"
						virsh --quiet snapshot-delete --domain "$candidate" --snapshotname "$each_one"
						virsh_ec=$?
						if [ $virsh_ec -ne 0 ]; then
							printf \
								"%sfailed to delete snapshot '%s' of %s, virsh returned error code %d, terminating now%s\n" \
								"$red" "$each_one" "$candidate" $virsh_ec "$regular"
							exit 2
						fi
					done
				fi
				virsh --quiet undefine "$candidate" --remove-all-storage --wipe-storage
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# attach_cmd():
#   Attaches storage volumes
#   (that is, sparse QCOW2 images) to one or more (in)active VMs
# ---------------------------------------------------------------------------

attach_cmd() {
	lowest_num_args=4
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage attach
	fi

	volume_name=""
	volume_size=""
	pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--name)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid volume name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_name=$value
			;;
			--size)
				is_number_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_size_min=128
				volume_size_max=8192
				if [ "$value" -lt "$volume_size_min" ] \
					|| [ "$value" -gt "$volume_size_max" ] \
					|| [ $((value % volume_size_min)) -gt 0 ]; then
					printf "%svolume size must be between %d and %d GiB inclusive, and an integer multiple of %d%s\n" \
						"$red" $volume_size_min $volume_size_max $volume_size_min "$regular"
					exit 1
				fi
				volume_size=$value
			;;
			--pool)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				pool_name=$value
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage attach
			;;
		esac
		shift
	done

	if [ -z "$volume_name" ] \
		|| [ -z "$volume_size" ] \
		|| [ -z "$pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage attach
	fi

	all_VMs=$(virsh list --name --all)
	if [ -z "$all_VMs" ]; then
		printf "\n%scannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage attach
	fi

	pool_path=$(virsh pool-dumpxml "$pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' does not look like a VM%s\n" "$yellow" "$candidate" "$regular"
			else
				virtio_dev=""
				devices_taken=$(virsh dumpxml "$candidate" | grep "<target dev='" \
					| awk -F "<target dev='" '{ print $2 }'  | awk -F "' bus='" '{ print $1 }')

				for letter in {a..z}; do
					device_name=vd"$letter"
					is_a_member "$device_name" "$devices_taken"
					test_result=$?
					if [ $test_result -eq 0 ]; then
						virtio_dev="$device_name"
						break
					fi
				done

				if [ -z "$virtio_dev" ]; then
					printf "%sthere seems to be a shortage of VirtIO storage device names for '%s'%s\n" "$yellow" "$candidate" "$regular"
				else
					qcow2_name="$candidate"_"$virtio_dev"_"$volume_name"_"$volume_size".qcow2
					qcow2_path="$pool_path"/"$qcow2_name"

					printf "%screating QCOW2 image %s for %s%s\n" "$green" "$qcow2_name" "$candidate" "$regular"

					virsh --quiet vol-create-as "$pool_name" --name "$qcow2_name" \
						--capacity "$volume_size"G --format qcow2
					virsh_ec=$?
					if [ $virsh_ec -ne 0 ]; then
						printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
						exit 2
					fi

					printf "%sattaching %s to %s%s\n\n" "$green" "$qcow2_name" "$candidate" "$regular"

					virsh --quiet attach-disk "$candidate" "$qcow2_path" "$virtio_dev" \
						--driver qemu --subdriver qcow2 --targetbus virtio --persistent
					virsh_ec=$?
					if [ $virsh_ec -ne 0 ]; then
						printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
						exit 2
					fi
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# checkservice_cmd():
#   Checks if one or more active VMs are reachable via a specific TCP/port
# ---------------------------------------------------------------------------

checkservice_cmd() {
	lowest_num_args=2
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" "$lowest_num_args" "$regular"
		show_usage check-service
	fi

	param=$(echo "$1" | awk -F= '{print $1}')
	value=$(echo "$1" | awk -F= '{print $2}')

	if [ "$param" != "--port" ]; then
		printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
		show_usage check-service
	fi

	is_number_valid "$value"
	test_result=$?
	if [ $test_result -eq 0 ]; then
		printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
		exit 1
	fi

	if [ "$value" -lt 1 ] || [ "$value" -gt 65535 ]; then
		printf "%sTCP port number must be between 1 and 65535 inclusive%s\n" "$red" "$regular"
		exit 1
	fi

	tcp_port=$value

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage check-service
	fi

	shift

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				nc -z -w 1 "$candidate" "$tcp_port" > /dev/null 2>&1
				netcat_ec=$?
				if [ $netcat_ec -eq 0 ]; then
					printf "%s%s is accepting packets on port %d/TCP%s\n" "$green" "$candidate" "$tcp_port" "$regular"
				else
					printf "%s%s is not accepting packets on port %d/TCP%s\n" "$red" "$candidate" "$tcp_port" "$regular"
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# clone_cmd():
#   Clones a specified template VM into one or more new VMs
# ---------------------------------------------------------------------------

clone_cmd() {
	lowest_num_args=3
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage clone
	fi

	template_VM=""
	clone_pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--template)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid template name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_inactive_VMs=$(virsh list --name --inactive)
				is_a_member "$value" "$all_inactive_VMs"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%stemplate should be an existing inactive VM%s\n" "$red" "$regular"
					exit 1
				fi
				template_VM=$value
			;;
			--target-pool)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				clone_pool_name=$value
				;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage clone
			;;
		esac
		shift
	done

	if [ -z "$template_VM" ] || [ -z "$clone_pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage clone
	fi

	template_pool_name=""
	template_pool_path=""
	template_volume_path=$(virsh dumpxml "$template_VM" \
		| grep "<source file='" \
		| awk -F "<source file='" '{ print $2 }' \
		| awk -F "'" '{ print $1 }')

	for pool in $all_active_pools; do
		volumes_in_pool=$(virsh vol-list "$pool")
		template_volume_in_list=$(echo "$volumes_in_pool" | grep "$template_volume_path")
		if [ -n "$template_volume_in_list" ]; then
			template_pool_name=$pool
			template_pool_path=$(virsh pool-dumpxml "$pool" \
				| grep "<path>" \
				| awk -F "<path>" '{ print $2 }' \
				| awk -F "</path>" '{ print $1 }')
			all_active_pools=""
		fi
	done

	all_VMs=$(virsh list --name --all)

	template_volume_name=$(echo "$template_volume_path" \
		| awk -F "${template_pool_path}/" '{ print $2 }')
	clone_pool_path=$(virsh pool-dumpxml "$clone_pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			test_result=$?
			if [ $test_result -eq 1 ]; then
				printf "%sthere is already a VM '%s', so I am skipping that one%s\n" "$yellow" "$candidate" "$regular"
			else
				clone_volume_name="$candidate".qcow2

				printf "%scloning %s into %s%s\n" "$green" "$template_volume_name" "$clone_volume_name" "$regular"

				virsh --quiet vol-clone --pool "$template_pool_name" "$template_volume_name" "$clone_volume_name"
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi

				if [ "$template_pool_path" != "$clone_pool_path" ]; then
					printf "%smoving %s between pools (%s ==> %s)%s\n" \
						"$green" "$clone_volume_name" "$template_pool_name" "$clone_pool_name" "$regular"

					sudo mv "$template_pool_path"/"$clone_volume_name" "$clone_pool_path"/
					move_ec=$?
					if [ $move_ec -ne 0 ]; then
						printf "%soperation failed, mv returned error code %d, terminating now%s\n" "$red" $move_ec "$regular"
						exit 2
					fi

					virsh --quiet pool-refresh "$template_pool_name"
					virsh --quiet pool-refresh "$clone_pool_name"
				fi

				printf "%scloning %s into %s and attaching %s to it%s\n" \
					"$green" "$template_VM" "$candidate" "$clone_volume_name" "$regular"

				virt-clone --quiet -o "$template_VM" -n "$candidate" \
					--preserve-data -f "$clone_pool_path"/"$clone_volume_name"
				virt_clone_ec=$?
				if [ $virt_clone_ec -ne 0 ]; then
					printf "%soperation failed, virt-clone returned error code %d, terminating now%s\n" \
						"$red" $virt_clone_ec "$regular"
					exit 2
				fi

				valid_hostname=$(echo "$candidate" | tr "[:upper:]._" "[:lower:]00")
				valid_hostname=${valid_hostname/%-/0}

				printf "%ssetting '%s' as a hostname for %s%s\n" "$green" "$valid_hostname" "$candidate" "$regular"

                sudo virt-customize --quiet -d "$candidate" --hostname "$valid_hostname"
				virt_customize_ec=$?
				if [ $virt_customize_ec -ne 0 ]; then
					printf "%soperation failed, virt-customize returned error code %d, terminating now%s\n" \
						"$red" $virt_customize_ec "$regular"
					exit 2
				fi

				printf "%sdeleting SSH host keys from %s%s\n\n" "$green" "$candidate" "$regular"

				sudo virt-customize --quiet -d "$candidate" \
					--delete /etc/ssh/ssh_host_dsa_key \
					--delete /etc/ssh/ssh_host_dsa_key.pub \
					--delete /etc/ssh/ssh_host_ecdsa_key \
					--delete /etc/ssh/ssh_host_ecdsa_key.pub \
					--delete /etc/ssh/ssh_host_ed25519_key \
					--delete /etc/ssh/ssh_host_ed25519_key.pub \
					--delete /etc/ssh/ssh_host_key \
					--delete /etc/ssh/ssh_host_key.pub \
					--delete /etc/ssh/ssh_host_rsa_key \
					--delete /etc/ssh/ssh_host_rsa_key.pub

				virt_customize_ec=$?
				if [ $virt_customize_ec -ne 0 ]; then
					printf "%soperation failed, virt-customize returned error " "$red"
					printf "code %d, terminating now%s\n" $virt_customize_ec "$regular"
					exit 2
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# create_network_cmd():
#   Instantiates a new libvirt network
# ---------------------------------------------------------------------------

create_network_cmd() {
	net_name=""
	domain_name=""
	router_addr=""
	netmask_addr=""
	dhcp_srv=""
	from_addr=""
	to_addr=""

	for argument; do

		param=$(echo "$argument" | awk -F= '{print $1}')
		value=$(echo "$argument" | awk -F= '{print $2}')

		case $param in
			--name)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid network name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_networks=$(virsh net-list --name --all)
				is_a_member "$value" "$all_networks"
				test_result=$?
				if [ $test_result -eq 1 ]; then
					printf "%snetwork '%s' already exists%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				net_name=$value
			;;
			--domain)
				first_char_test=$(echo "${value:0:1}" | tr -d "[:alnum:]")
				if [ -n "$first_char_test" ]; then
					printf "%s'%s' is not a valid domain name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				domain_pattern='(?=^.{5,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)'
				test_result=$(echo "$value" | grep -P "$domain_pattern")
				if [ -z "$test_result" ]; then
					printf "%s'%s' is not a valid domain name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_networks=$(virsh net-list --name --all)
				for each_net in $all_networks; do
					domain_name=$(virsh net-dumpxml "$each_net" | grep "<domain name='" \
						| awk -F "<domain name='" '{ print $2 }' | awk -F "'" '{ print $1 }')
					if [ "$value" == "$domain_name" ]; then
						printf "%sdomain %s is already used in network %s%s\n" "$red" "$value" "$each_net" "$regular"
						exit 1
					fi
				done
				domain_name=$value
			;;
			--router)
				is_ipv4_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid router IPv4 address%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_networks=$(virsh net-list --name --all)
				for each_net in $all_networks; do
					router_addr=$(virsh net-dumpxml "$each_net" | grep "<ip address='" \
						| awk -F "<ip address='" '{ print $2 }' | awk -F "' " '{ print $1 }')
					if [ "$value" == "$router_addr" ]; then
						printf "%srouter address %s is already used in network %s%s\n" "$red" "$value" "$each_net" "$regular"
						exit 1
					fi
				done
				router_addr=$value
			;;
			--netmask)
				is_ipv4_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid netmask IPv4 address%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				netmask_addr=$value
			;;
			--dhcp)
				if [ "$value" != "on" ] && [ "$value" != "off" ]; then
					printf "%svalue for --dhcp should be either on or off%s\n" "$red" "$regular"
					exit 1
				fi
				dhcp_srv=$value
			;;
			--from)
				is_ipv4_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid IPv4 address for the '--from' parameter%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				from_addr=$value
			;;
			--to)
				is_ipv4_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid IPv4 address for the '--to' parameter%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				to_addr=$value
			;;
			help)
				echo
				show_usage create_network
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage create_network
			;;
		esac
	done

	if [ -z "$net_name" ] || [ -z "$domain_name" ] || \
		[ -z "$router_addr" ] || [ -z "$netmask_addr" ] || [ -z "$dhcp_srv" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage create_network
	fi
	
	if [ "$dhcp_srv" == "on" ] && ([ -z "$from_addr" ] || [ -z "$to_addr" ]); then
		printf "\n%sIP range for dynamic address allocation has not been defined%s\n\n" "$red" "$regular"
		show_usage create_network
	fi

	max_bridge_devs=15
	all_networks=$(virsh net-list --name --all)
	how_many=$(echo "$all_networks" | wc -w)

    if [ "$how_many" -ge "$max_bridge_devs" ]; then
		printf "%sthere are already %d libvirt (in)active " "$red" $max_bridge_devs
		printf "networks available, refusing to create another one%s\n" "$regular"
        exit 1
    fi

	bridge_dev=""
	names_taken=""
	default_net_xml="/usr/share/libvirt/networks/default.xml"
	prefix=$(grep "<bridge name=\"" "$default_net_xml" | \
		awk -F "<bridge name=" '{print $2}' | awk -F "/" '{print $1}' | tr -d "0-9\"\'")

	for each_net in $all_networks; do
		bridge_name=$(virsh net-dumpxml "$each_net" | grep "<bridge name='" \
			| awk -F "<bridge name='" '{ print $2 }' | awk -F "'" '{ print $1 }')
		names_taken=${names_taken}${bridge_name}" "
	done

	for ((digit=0 ; digit < max_bridge_devs ; digit++)); do
		candidate="$prefix""$digit"
		is_a_member "$candidate" "$names_taken"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			bridge_dev="$candidate"
			break
		fi
	done

	random_alphanum=$(strings /dev/urandom \
		| grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n')
	temp_net_xml="$random_alphanum".xml

	cat "$default_net_xml" > ~/"$temp_net_xml"

	if [ "$dhcp_srv" == "on" ]; then
		new_line="<range start=\""${from_addr}"\" end=\""${to_addr}"\"/>"
		sed -i "/<range start/c \ \ \ \ \ \ $new_line" ~/"$temp_net_xml"
	else
		sed -i /'<dhcp>'/d ~/"$temp_net_xml"
		sed -i /'<range start='/d ~/"$temp_net_xml"
		sed -i /'<\/dhcp>'/d ~/"$temp_net_xml"
	fi

	new_line="<name>"${net_name}"</name>"
	sed -i "/<name>default/c\ \ $new_line" ~/"$temp_net_xml"

	new_line="<bridge name=\""${bridge_dev}"\"/>"
	sed -i "/<bridge name=/c\ \ $new_line" ~/"$temp_net_xml"

	new_line="<ip address=\""${router_addr}"\" netmask=\""${netmask_addr}"\">"
	sed -i "/<ip address=/c\ \ $new_line" ~/"$temp_net_xml"

	new_line="<domain name=\""${domain_name}"\" localOnly=\"yes\"/>"
	sed -i "/<ip address/i\ \ ${new_line}" ~/"$temp_net_xml"

	virsh -q net-define ~/"$temp_net_xml"
	virsh_ec=$?

	rm ~/"$temp_net_xml"

	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to define %s, virsh returned error code %d, terminating now%s\n" "$red" "$net_name" $virsh_ec "$regular"
		exit 2
	fi

	virsh -q net-start "$net_name"
	virsh_ec=$?
	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to start %s, virsh returned error code %d%s\n" "$yellow" "$net_name" $virsh_ec "$regular"
	fi

	virsh -q net-autostart "$net_name"
	virsh_ec=$?
	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to mark %s as 'autostart', virsh returned error code %d%s\n" "$yellow" "$net_name" $virsh_ec "$regular"
	fi

	printf "%snetwork %s successfully created%s\n" "$green" "$net_name" "$regular"
}

# ---------------------------------------------------------------------------
# create_pool_cmd()
#   Instantiates a new libvirt storage pool
# ---------------------------------------------------------------------------

create_pool_cmd() {
	pool_name=""
	local_path=""

	for argument; do

		param=$(echo "$argument" | awk -F= '{print $1}')
		value=$(echo "$argument" | awk -F= '{print $2}')

		case $param in
			--name)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_pools=$(virsh pool-list --name --all)
				is_a_member "$value" "$all_pools"
				test_result=$?
				if [ $test_result -eq 1 ]; then
					printf "%spool '%s' already exists%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				pool_name=$value
			;;
			--path)
				if [ -z "$value" ]; then
					printf "%spool path not specified%s\n" "$red" "$regular"
					exit 1
				fi
				if [ ! -d "$value" ]; then
					printf "%spath '%s' does not exist%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_pools=$(virsh pool-list --name --all)
				for each_pool in $all_pools; do
					local_path=$(virsh pool-dumpxml "$each_pool" | grep "<path>" \
						| awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')
					if [ "$value" == "$local_path" ]; then
						printf "%spool %s is already defined under %s%s\n" "$red" "$each_pool" "$value" "$regular"
						exit 1
					fi
				done
				local_path=$value
			;;
			help)
				echo
				show_usage create_pool
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage create_pool
			;;
		esac
	done

	if [ -z "$pool_name" ] || [ -z "$local_path" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage create_pool
	fi

	virsh -q pool-define-as "$pool_name" dir - - - - "$local_path"
	virsh_ec=$?
	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to define %s, virsh returned error code %d, terminating now%s\n" "$red" "$pool_name" $virsh_ec "$regular"
		exit 2
	fi

	virsh -q pool-start "$pool_name"
	virsh_ec=$?
	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to start %s, virsh returned error code %d%s\n" "$yellow" "$pool_name" $virsh_ec "$regular"
	fi

	virsh -q pool-autostart "$pool_name"
	virsh_ec=$?
	if [ $virsh_ec -ne 0 ]; then
		printf "%sfailed to mark %s as 'autostart', virsh returned error code %d%s\n" "$yellow" "$pool_name" $virsh_ec "$regular"
	fi

	printf "%spool %s successfully created%s\n" "$green" "$pool_name" "$regular"
}

# ---------------------------------------------------------------------------
# create_cmd():
#   Creates a new libvirt network or a new storage pool
# ---------------------------------------------------------------------------

create_cmd() {
	entity_type="$1"

	case $entity_type in
	network)
		shift
		create_network_cmd "$@"
	;;
	pool)
		shift
		create_pool_cmd "$@"
	;;
	help)
		echo
		show_usage create
	;;
	"")
		printf "\n%sentity type not specified%s\n\n" "$red" "$regular"
		show_usage create
	;;
	*)
		printf "\n%sinvalid entity type '%s'%s\n\n" "$red" "$entity_type" "$regular"
		show_usage create
	;;
	esac
}

# ---------------------------------------------------------------------------
# deactivate_cmd():
#   Powers down one or more active VMs
# ---------------------------------------------------------------------------

deactivate_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" \
			"$red" $lowest_num_args "$regular"
		show_usage deactivate
	fi

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage deactivate
	fi

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%sshutting down %s%s\n" "$green" "$candidate" "$regular"

				virsh --quiet shutdown $candidate
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi
				sleep 1
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# define_cmd():
#   Defines one or more new VMs -- no guest OS is installed
# ---------------------------------------------------------------------------

define_cmd() {
	lowest_num_args=7
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage define
	fi

	memory_size=""
	cpu_cores=""
	volume_size=""
	libvirt_network=""
	os_variant=""
	pool_name=""

	for ((argument=1 ; argument <= $((lowest_num_args - 1)) ; argument++)); do

		param=$(echo "$1" | awk -F= '{print $1}')
		value=$(echo "$1" | awk -F= '{print $2}')

		case $param in
			--ram)
				is_number_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				memory_size_min=32
				memory_size_max=16384
				if [ "$value" -lt "$memory_size_min" ] \
					|| [ "$value" -gt "$memory_size_max" ] \
					|| [ $((value % memory_size_min)) -gt 0 ]; then
					printf "%smemory size must be between %d and %d MiB inclusive, and an integer multiple of %d%s\n" \
					"$red" $memory_size_min $memory_size_max $memory_size_min "$regular"
					exit 1
				fi
				memory_size=$value
			;;
			--cores)
				is_number_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				cpu_cores_max=$(virsh nodeinfo | grep "CPU(s):" | awk -F ":" '{ print $2 }')
				if [ "$value" -lt 1 ] || [ "$value" -gt "$cpu_cores_max" ]; then
					printf "%snumber of CPU cores should be between 1 and %d inclusive%s\n" "$red" "$cpu_cores_max" "$regular"
					exit 1
				fi
				cpu_cores=$value
			;;
			--volume-size)
				is_number_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				volume_size_min=16
				volume_size_max=512
				if [ "$value" -lt "$volume_size_min" ] \
					|| [ "$value" -gt "$volume_size_max" ] \
					|| [ $((value % volume_size_min)) -gt 0 ]; then
					printf "%svolume size must be between %d and %d GiB inclusive, and an integer multiple of %d%s\n" \
						"$red" $volume_size_min $volume_size_max $volume_size_min "$regular"
					exit 1
				fi
				volume_size=$value
			;;
			--network)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid network name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_networks=$(virsh net-list --name)
				is_a_member "$value" "$all_active_networks"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%sI cannot seem to find network %s%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				libvirt_network=$value
			;;
			--guest-os)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid OS variant name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_os_variants=$(osinfo-query os -f short-id)
				is_a_member "$value" "$all_os_variants"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%sunknown OS variant '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				os_variant=$value
			;;
			--pool)
				is_name_valid "$value"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%s'%s' is not a valid pool name%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				all_active_pools=$(virsh pool-list --name)
				is_a_member "$value" "$all_active_pools"
				test_result=$?
				if [ $test_result -eq 0 ]; then
					printf "%scannot seem to find pool '%s'%s\n" "$red" "$value" "$regular"
					exit 1
				fi
				pool_name=$value
			;;
			*)
				printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
				show_usage define
			;;
		esac
		shift
	done

	if [ -z "$memory_size" ] \
		|| [ -z "$cpu_cores" ] \
		|| [ -z "$volume_size" ] \
		|| [ -z "$libvirt_network" ] \
		|| [ -z "$os_variant" ] \
		|| [ -z "$pool_name" ]; then
		printf "\n%sat least one of the required arguments has not been set%s\n\n" "$red" "$regular"
		show_usage define
	fi

	all_VMs=$(virsh list --name --all)
	pool_path=$(virsh pool-dumpxml "$pool_name" \
		| grep "<path>" \
		| awk -F "<path>" '{ print $2 }' \
		| awk -F "</path>" '{ print $1 }')

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			test_result=$?
			if [ $test_result -eq 1 ]; then
				printf "%sthere is already a VM '%s', so I am skipping that one%s\n" "$yellow" "$candidate" "$regular"
			else
				random_alphanum=$(strings /dev/urandom \
					| grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n')
				xml_path="$candidate"_"$random_alphanum".xml
				qcow2_name="$candidate".qcow2
				qcow2_path="$pool_path"/"$qcow2_name"

				printf "%screating volume %s for %s%s\n" \
					"$green" "$qcow2_name" "$candidate" "$regular"

				virsh --quiet vol-create-as "$pool_name" --name "$qcow2_name" --capacity "$volume_size"G --format qcow2
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					exit 2
				fi

				printf "%scoming up with a detailed XML description of %s%s\n" "$green" "$candidate" "$regular"

				virt-install --quiet --name "$candidate" --os-variant "$os_variant" \
					--memory "$memory_size" --cpu host --vcpus="$cpu_cores" \
					--network network="$libvirt_network",model=virtio \
					--disk "$qcow2_path",bus=virtio --boot network,hd \
					--print-xml 1 > ~/"$xml_path"
				virt_install_ec=$?
				if [ $virt_install_ec -ne 0 ]; then
					printf "%soperation failed, virt-install returned error code %d, terminating now%s\n" \
						"$red" $virt_install_ec "$regular"
					rm -f ~/"$xml_path"
					exit 2
				fi

				printf "%sretracting sound card & tablet input devices from XML description%s\n" "$green" "$regular"

				sed -i /'<sound model'/d ~/"$xml_path"
				sed -i /'<input type="tablet'/d ~/"$xml_path"

				printf "%sdefining %s%s\n\n" "$green" "$candidate" "$regular"

				virsh --quiet define ~/"$xml_path" --validate
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d, terminating now%s\n" "$red" $virsh_ec "$regular"
					rm -f ~/"$xml_path"
					exit 2
				fi
				rm -f ~/"$xml_path"
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# getmac_cmd():
#   Display the MAC address of the first network adapter of one or more VMs
# ---------------------------------------------------------------------------

getmac_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage getmac
	fi

	all_VMs=$(virsh list --name --all)
	if [ -z "$all_VMs" ]; then
		printf "\n%scannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage getmac
	fi

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%scannot seem to find VM '%s'%s\n" "$yellow" "$candidate" "$regular"
			else
				mac_addr=$(virsh --quiet dumpxml "$candidate" | grep "mac address" \
					| awk -F "<mac address='" '{ print $2 }' | awk -F "'" '{ print $1 }')
				printf "%s%s looks like %s in the local network%s\n" "$green" "$candidate" "$mac_addr" "$regular"
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# list_cmd():
#   Presents all available VMs, libvirt networks, pools, or volumes
# ---------------------------------------------------------------------------

list_cmd() {
	num_args=1
	if [ $# -ne $num_args ]; then
		printf "\n%sincorrect number of entity types (need exactly %d)%s\n\n" "$red" $num_args "$regular"
		show_usage list
	fi

	entity_type="$1"

	case $entity_type in
	vm)
		all_VMs=$(virsh list --name --all)
		if [ -z "$all_VMs" ]; then
			printf "\n%scannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
			exit 1
		fi

		temp_file_name=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n').lst

		echo "Name State CPU(s) RAM[KiB] BLK(s) NIC(s) PrimaryNet" >> ~/"$temp_file_name"
		echo "---- ----- ------ -------- ------ ------ ----------" >> ~/"$temp_file_name"

		for name in $all_VMs; do
			state=$(virsh dominfo "$name" | grep State \
				| awk -F ":" '{ print $2 }' | sed -e 's/^[ \t]*//')
			if [ "$state" == "running" ]; then
				state="active"
			else
				state="inactive"
			fi

			CPUs=$(virsh dominfo "$name" | grep CPU\(s\) \
				| awk -F ":" '{ print $2 }' | sed -e 's/^[ \t]*//')
			ram_size=$(virsh dominfo "$name" | grep "Max memory" \
				| awk -F ":" '{ print $2 }' | awk -F " " '{ print $1 }')
			block_devices=$(($(virsh domblklist "$name" | wc -l)-3))

			look_for="<source network='"

			first_adapter_conn=$(virsh dumpxml "$name" | grep "<source network='" | head -n 1 \
				| awk -F "<source network='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			if [ -z "$first_adapter_conn" ]; then
				look_for="<interface type='bridge'>"
				first_adapter_conn="hostBridge"
			fi

			network_adapters=$(virsh dumpxml "$name" | grep -c "$look_for")

			echo "$name" "$state" "$CPUs" "$ram_size" "$block_devices" \
				"$network_adapters" "$first_adapter_conn" >> ~/"$temp_file_name"
		done

		echo
		column -t ~/"$temp_file_name"
		echo

		rm -f ~/"$temp_file_name"
	;;
	network)
		all_networks=$(virsh net-list --name --all)
		if [ -z "$all_networks" ]; then
			printf "\n%scannot seem to find a single libvirt network on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
			exit 1
		fi

		temp_file_name=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n').lst

		echo "Name State Mode Domain MACaddr Router/DNSaddr DHCP fromIPaddr toIPaddr Clients" >> ~/"$temp_file_name"
		echo "---- ----- ---- ------ ------- -------------- ---- ---------- -------- -------" >> ~/"$temp_file_name"

		all_VMs=$(virsh list --name --all)

		for name in $all_networks; do
			state=$(virsh net-info "$name" | grep Active \
				| awk -F ":" ' {print $2} ' | sed -e 's/^[ \t]*//')
			if [ "$state" == "yes" ]; then
				state="active"
			else
				state="inactive"
			fi

			mode=$(virsh net-dumpxml "$name" | grep "mode='" \
				| awk -F "mode='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			domain_name=$(virsh net-dumpxml "$name" | grep "<domain name='" \
				| awk -F "<domain name='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			if [ -z "$domain_name" ]; then
				domain_name="n/a"
			fi

			mac_addr=$(virsh net-dumpxml "$name" | grep "<mac address='" \
				| awk -F "<mac address='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			ip_addr=$(virsh net-dumpxml "$name" | grep "<ip address='" \
				| awk -F "<ip address='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			dhcp_server=$(virsh net-dumpxml "$name" | grep '<dhcp>')
			if [ -z "$dhcp_server" ]; then
				dhcp_server="off"
				ip_begin="n/a"
				ip_end="n/a"
			else
				dhcp_server="on"
				ip_begin=$(virsh net-dumpxml "$name" | grep "<range start='" \
					| awk -F "<range start='" '{ print $2 }' | awk -F "'" '{ print $1 }')
				ip_end=$(virsh net-dumpxml "$name" | grep "<range start='" \
					| awk -F "' end='" '{ print $2 }' | awk -F "'" '{ print $1 }')
			fi

			net_clients=0
			if [ -n "$all_VMs" ]; then
				for guest in $all_VMs; do
					how_many=$(virsh dumpxml "$guest" | grep -c "$name")
					(( net_clients += how_many ))
				done
			fi

			echo "$name" "$state" "$mode" "$domain_name" "$mac_addr" "$ip_addr" \
				"$dhcp_server" "$ip_begin" "$ip_end" "$net_clients" >> ~/"$temp_file_name"
		done

		echo
		column -t ~/"$temp_file_name"
		echo

		rm -f ~/"$temp_file_name"
	;;
	pool)
		all_pools=$(virsh pool-list --name --all)
		if [ -z "$all_pools" ]; then
			printf "\n%scannot seem to find a single pool on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
			exit 1
		fi

		temp_file_name=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n').lst

		echo "Name State Capacity Allocation Available PoolDirPath Volumes" >> ~/"$temp_file_name"
		echo "---- ----- -------- ---------- --------- ----------- -------" >> ~/"$temp_file_name"

		for name in $all_pools; do
			state=$(virsh pool-info "$name" | grep "State:" \
				| awk -F "State:" '{ print $2 }' | sed -e 's/^[ \t]*//')
			if [ "$state" == "running" ]; then
				state="active"
			else
				state="inactive"
			fi

			capacity=$(virsh pool-info "$name" | grep "Capacity:" \
				| awk -F "Capacity:" '{ print $2 }' | sed -e 's/^[ \t]*//' | tr -d " ")
			allocation=$(virsh pool-info "$name" | grep "Allocation:" \
				| awk -F "Allocation:" '{ print $2 }' | sed -e 's/^[ \t]*//' | tr -d " ")
			available=$(virsh pool-info "$name" | grep "Available:" \
				| awk -F "Available:" '{ print $2 }' | sed -e 's/^[ \t]*//' | tr -d " ")
			path2pool_dir=$(virsh pool-dumpxml "$name" | grep "<path>" \
				| awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')
			volumes=$(($(virsh vol-list "$name" | wc -l)-3))

			echo "$name" "$state" "$capacity" "$allocation" "$available" "$path2pool_dir" "$volumes" >> ~/"$temp_file_name"
		done

		echo
		column -t ~/"$temp_file_name"
		echo

		rm -f ~/"$temp_file_name"
	;;
	volume)
		all_pools=$(virsh pool-list --name --all)
		if [ -z "$all_pools" ]; then
			printf "\n%scannot seem to find a single pool on this host,\n" "$red"
			printf " so I am assuming there are no volumes either (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$regular"
			exit 1
		fi

		temp_file_name=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n').lst

		echo "Volume Capacity Allocation Pool" >> ~/"$temp_file_name"
		echo "------ -------- ---------- ----" >> ~/"$temp_file_name"

		for pool in $all_pools; do
			volumes_in_pool=$(virsh vol-list "$pool" | grep " /" | awk -F " /" '{ print $1 }')
			for volume in $volumes_in_pool; do
				capacity=$(virsh vol-info "$volume" "$pool" | grep "Capacity:" \
					| awk -F "Capacity:" '{ print $2 }' | sed -e 's/^[ \t]*//' | tr -d " ")
				allocation=$(virsh vol-info "$volume" "$pool" | grep "Allocation:" \
					| awk -F "Allocation:" '{ print $2 }' | sed -e 's/^[ \t]*//' | tr -d " ")
				echo "$volume" "$capacity" "$allocation" "$pool" >> ~/"$temp_file_name"
			done
		done

		echo
		column -t ~/"$temp_file_name"
		echo

		rm -f ~/"$temp_file_name"
	;;
	help)
		echo
		show_usage list
	;;
	*)
		printf "\n%sinvalid entity type '%s'%s\n\n" "$red" "$entity_type" "$regular"
		show_usage list
	;;
	esac
}

# ---------------------------------------------------------------------------
# ping_cmd():
#   Sends a specified number of ICMP packets to one or more active VMs
# ---------------------------------------------------------------------------

ping_cmd() {
	lowest_num_args=2
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage ping
	fi

	param=$(echo "$1" | awk -F= '{print $1}')
	value=$(echo "$1" | awk -F= '{print $2}')

	if [ "$param" != "--count" ]; then
		printf "\n%sunknown argument '%s'%s\n\n" "$red" "$param" "$regular"
		show_usage ping
	fi

	is_number_valid "$value"
	test_result=$?
	if [ $test_result -eq 0 ]; then
		printf "%s'%s' does not look like a positive integer%s\n" "$red" "$value" "$regular"
		exit 1
	fi

	count_min=1
	count_max=64

	if [ "$value" -lt "$count_min" ] || [ "$value" -gt "$count_max" ]; then
		printf "%spacket count should be between %d and %d inclusive%s\n" "$red" $count_min $count_max "$regular"
		exit 1
	fi

	n_packets="$value"

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage ping
	fi

	shift

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s%s is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "\n%sattempting to ping %s%s\n" "$green" "$candidate" "$regular"
				/usr/bin/ping -c "$n_packets" "$candidate"
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# reboot_cmd():
#   Reboots one or more active VMs
# ---------------------------------------------------------------------------

reboot_cmd() {
	lowest_num_args=1
	if [ $# -lt $lowest_num_args ]; then
		printf "\n%sincorrect number of arguments (minimum is %d)%s\n\n" "$red" $lowest_num_args "$regular"
		show_usage reboot
	fi

	all_active_VMs=$(virsh list --name)
	if [ -z "$all_active_VMs" ]; then
		printf "\n%scannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI set?)%s\n\n" "$red" "$regular"
		show_usage reboot
	fi

	for candidate; do
		is_name_valid "$candidate"
		test_result=$?
		if [ $test_result -eq 0 ]; then
			printf "%s'%s' is not a valid VM name%s\n" "$yellow" "$candidate" "$regular"
		else
			is_a_member "$candidate" "$all_active_VMs"
			test_result=$?
			if [ $test_result -eq 0 ]; then
				printf "%s'%s' is not an active VM%s\n" "$yellow" "$candidate" "$regular"
			else
				printf "%srebooting %s%s\n" "$green" "$candidate" "$regular"

				virsh --quiet reboot "$candidate";
				virsh_ec=$?
				if [ $virsh_ec -ne 0 ]; then
					printf "%soperation failed, virsh returned error code %d%s\n" "$red" $virsh_ec "$regular"
				else
					sleep 1
				fi
			fi
		fi
	done
}

# ---------------------------------------------------------------------------
# Main script body starts here
# ---------------------------------------------------------------------------

case "$1" in
	activate)
		shift
		activate_cmd "$@"
		;;
	annihilate)
		shift
		annihilate_cmd "$@"
		;;
	attach)
		shift
		attach_cmd "$@"
		;;
	check-service)
		shift
		checkservice_cmd "$@"
		;;
	clone)
		shift
		clone_cmd "$@"
		;;
	create)
		shift
		create_cmd "$@"
		;;
	deactivate)
		shift
		deactivate_cmd "$@"
		;;
	define)
		shift
		define_cmd "$@"
		;;
	getmac)
		shift
		getmac_cmd "$@"
		;;
	list)
		shift
		list_cmd "$@"
		;;
	ping)
		shift
		ping_cmd "$@"
		;;
	reboot)
		shift
		reboot_cmd "$@"
		;;
	help)
		show_usage help
		;;
	"")
		printf "\n%scommand not specified%s\n" "$red" "$regular"
		show_usage
	;;
	*)
		printf "\n%sinvalid command '%s'%s\n" "$red" "$1" "$regular"
		show_usage help
	;;
esac
