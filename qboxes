#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

BFACE=$(tput bold)
NFACE=$(tput sgr0)

show_usage() {
	case "$1" in
		activate)
			printf "COMMAND NAME\n"
			printf "  activate - bring inactive VMs up\n\n"
			printf "SYNOPSIS\n"
			printf "  activate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Power one or more inactive VMs up\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes activate leap423 sles11sp4${NFACE}\n\n"
			exit 1
			;;
		annihilate)
			printf "COMMAND NAME\n"
			printf "  annihilate - remove any trace of inactive VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  annihilate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Undefine one or more inactive VMs, delete all snapshots and associated storage volumes (${RED}think TWICE before annihilating!${NC})\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes annihilate guest_{1..5}${NFACE}\n\n" 
			exit 1
			;;
		attach)
			printf "COMMAND NAME\n"
			printf "  attach - attach storage volumes to VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  attach --name=<volume_name> --size=<capacity_in_GiB> --pool=<name> --vmdev=<VM_device> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create sparse QCOW2 files in specified pool, attach them as virtual hard drives to VMs\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes attach --name=data --size=4096 --pool=services --vmdev=vdb osd_node_{1,2,3}${NFACE}\n\n"
			exit 1
			;;
		check-service)
			printf "COMMAND NAME\n"
			printf "  check-service - check if connections to specified TCP port of a VM are possible\n\n"
			printf "SYNOPSIS\n";
			printf "  check-service --port=<tcp_port> <active_VM>\n\n";
			printf "DESCRIPTION\n";
			printf "  Check if an active VM is reachable via specificied TCP port\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes check-service --port=22 smt-server${NFACE}\n\n"
			exit 1
			;;
		clone)
			printf "COMMAND NAME\n"
			printf "  clone - clone a template VM into one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  clone --template=<VM_0> --target-pool=<pool_name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Clone an existing inactive template VM into one or more new VMs, indicate a target storage pool for the cloned volumes\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes clone --template=sles12sp3 --target-pool=services www_server_1 www_server_2 balancer${NFACE}\n\n"
			exit 1
			;;
		deactivate)
			printf "COMMAND NAME\n"
			printf "  deactivate - shutdown active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  deactivate <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Try to gracefully shutdown one or more active VMs\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes deactivate leap423${NFACE}\n\n"
			exit 1
			;;
		define)
			printf "COMMAND NAME\n"
			printf "  define - define one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  define --ram=<size_in_MiB> --cores=<count> --disk-size=<capacity_in_GiB> --network=<name> --guest-os=<os_variant> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Define one or more VMs according to specifications, do not install a guest OS on any of them\n"
			printf "  (Tip: Type ${BFACE}osinfo-query os${NFACE} for a list of all the supported OS variants)\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes define --ram=2048 --cores=2 --disk-size=1024 --network=grimsey --guest-os=opensuse42.3 --pool=services osd_node_{1..5}${NFACE}\n\n"
			exit 1
			;;
		getmac)
			printf "COMMAND NAME\n"
			printf "  getmac - reveal MAC addresses\n\n"
			printf "SYNOPSIS\n"
			printf "  getmac <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Reveal the first Ethernet adapter's MAC address of one or more VMs\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes getmac sles12sp{1,2,3}${NFACE}\n\n"
			exit 1
			;;
		ping)
			printf "COMMAND NAME\n"
			printf "  ping - send ICMP packets to active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  ping --count=<number_of_packets> <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
            printf "  Send a specified number of ICMP packets to one or more active VMs\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes ping --count=3 sles12sp2 sles12sp3${NFACE}\n\n"
            exit 1
			;;
		reboot)
			printf "COMMAND NAME\n";
			printf "  reboot - restart active VMs\n\n";
            printf "SYNOPSIS\n";
            printf "  reboot <active_VM_1> ... <active_VM_k>\n\n";
            printf "DESCRIPTION\n";
            printf "  Try to gracefully restart one or more active VMs\n\n"
			printf "${BFACE}EXAMPLE${NFACE}\n"
			printf "  ~/bin> ${BFACE}qboxes reboot sles12sp3${NFACE}\n"
            exit 1
			;;
		*)
			printf "\nThis is ${GREEN}qboxes${NC}, a simple command line tool for managing local QEMU/KVM VMs.\n"
			printf "Currently the following commands are implemented:\n\n"
			printf "  activate\t: bring inactive VMs up\n"
			printf "  annihilate\t: remove any trace of inactive VMs\n"
			printf "  attach\t: attach storage volumes to VMs\n"
			printf "  check-service\t: check if connections to specified TCP port of a VM are possible\n"
			printf "  clone\t\t: clone a template VM into one or more new VMs\n"
			printf "  deactivate\t: shutdown active VMs\n"
			printf "  define\t: define one or more new VMs\n"
			printf "  getmac\t: reveal MAC addresses\n"
			printf "  ping\t\t: send ICMP packets to active VMs\n"
			printf "  reboot\t: restart active VMs\n\n"
			printf "  help\t\t: display this summary of commands\n\n"
			printf "Type ${GREEN}qboxes command_name${NC} for the syntax and a usage example of a specific command.\n\n"
            exit 1
			;;
	esac
}

is_name_valid() {
	THE_NAME="$1"
	FIRST_CHAR_TEST=$(echo "${THE_NAME:0:1}" | tr -d "[:alnum:]")
	if [ -n "$FIRST_CHAR_TEST" ]; then
		return 0
	else
		VALID_NAME_TEST=$(echo "$THE_NAME" | tr -d "[:alnum:]-_")
		if [ -n "$VALID_NAME_TEST" ]; then
			return 0
		else
			return 1
		fi
	fi
}

is_a_member() {
    item="$1"
    theSET="$2"
    included=0
    for each_one in $theSET; do
        if [ $item == $each_one ]; then
            included=1
            break
        fi  
    done
    return $included
}

activate_cmd() {
	LOWEST_NUM_ARGS=1

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage activate
	fi

    ALL_INACTIVE_VMs=$(virsh list --name --inactive)

	if [ -z "$ALL_INACTIVE_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single inactive VM (is LIBVIRT_DEFAULT_URI set?)${NC}\n\n"
		show_usage activate
	fi

	for candidate; do
		is_name_valid "$candidate"
		if [ $? == 0 ]; then
			printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
		else
            is_a_member "$candidate" "$ALL_INACTIVE_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}%s does not look like an inactive VM${NC}\n" "$candidate"
            else
                printf "${GREEN}Powering up %s${NC}\n" "$candidate"
                virsh --quiet start "$candidate" \
                || printf "${YELLOW}Operation failed, virsh returned error code %d${NC}\n" $?
            fi            
		fi
	done
}

annihilate_cmd() {
	LOWEST_NUM_ARGS=1

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage annihilate
	fi

	ALL_INACTIVE_VMs=$(virsh list --name --inactive)

	if [ -z "$ALL_INACTIVE_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single inactive VM (is LIBVIRT_DEFAULT_URI set?)${NC}\n\n"
		show_usage annihilate
	fi

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_INACTIVE_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}%s does not look like an inactive VM${NC}\n" "$candidate"
            else
                printf "${GREEN}Annihilating %s (this may take a while)${NC}\n" "$candidate"

                ALL_SNAPSHOTS=$(virsh snapshot-list --name "$candidate")

                if [ -n "$ALL_SNAPSHOTS" ]; then
                    for each_one in "$ALL_SNAPSHOTS"; do
                        virsh --quiet snapshot-delete --domain "$candidate" --snapshotname "$each_one"
                        if [ $? -ne 0 ]; then
                            printf \
                            "${RED}Failed to delete snapshot %s of %s, virsh returned error code %d, terminating now.${NC}\n" \
                            "$each_one" "$candidate" $?
                            exit 2
                        fi
                    done
                fi
                virsh --quiet undefine "$candidate" --remove-all-storage --wipe-storage
                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi
            fi
        fi
	done
}

attach_cmd() {
	LOWEST_NUM_ARGS=5

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage attach
	fi

	VOLUME_NAME=""
	VOLUME_SIZE=""
	POOL_NAME=""
	VM_DEV=""

	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do

		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')

		case $PARAM in
			--name)
				if [ -z "$VALUE" ]; then
					printf "${RED}Volume name not specified${NC}\n"
					exit 1
                fi
                is_name_valid "$VALUE"
                if [ $? == 0 ]; then
                    printf "${RED}%s is not a valid volume name${NC}\n" "$VALUE"
                    exit 1
                fi
                VOLUME_NAME=$VALUE
			;;
			--size)
				if [ -z "$VALUE" ]; then
					printf "${RED}Volume size not specified${NC}\n"
					exit 1
				fi
				VOLUME_SIZE=$VALUE
			;;
			--pool)
				if [ -z "$VALUE" ]; then
					printf "${RED}Pool name not specified${NC}\n"
					exit 1
				fi
                is_name_valid "$VALUE"
                if [ $? == 0 ]; then
                    printf "${RED}%s is not a valid pool name${NC}\n" "$VALUE"
                    exit 1
                fi
                ALL_ACTIVE_POOLS=$(virsh pool-list --name)
                is_a_member "$VALUE" "$ALL_ACTIVE_POOLS"
                if [ $? == 0 ]; then
                    printf "${RED}I cannot seem to find pool %s${NC}\n" "$VALUE"
                    exit 1
                fi
                POOL_NAME=$VALUE
			;;
			--vmdev)
				if [ -z "$VALUE" ]; then
					printf "${RED}Device file not specified${NC}\n"
					exit 1
				fi
				VM_DEV=$VALUE
            ;;
			*)
				printf "\n${RED}I do not recognize this '%s' argument${NC}\n\n" "$PARAM"
				show_usage attach
            ;;
		esac
		shift
	done

	if [ -z "$VOLUME_NAME" ] || [ -z "$VOLUME_SIZE" ] || [ -z "$POOL_NAME" ] || [ -z "$VM_DEV" ]; then
		printf "\n${RED}At least one of the required arguments has not been set${NC}\n\n"
		show_usage attach
	fi

	ALL_VMs=$(virsh list --name --all)

	if [ -z "$ALL_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI properly set?)${NC}\n\n"
		show_usage attach
	fi

	POOL_PATH=$(virsh pool-dumpxml "$POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}%s does not look like a VM${NC}\n" "$candidate"
            else
                QCOW2_NAME="$candidate"_"$VM_DEV"_"$VOLUME_NAME"_"$VOLUME_SIZE".qcow2
                QCOW2_PATH="$POOL_PATH"/"$QCOW2_NAME"

                printf "${GREEN}Creating QCOW2 image %s for %s${NC}\n" "$QCOW2_NAME" "$candidate"

                virsh --quiet vol-create-as "$POOL_NAME" --name "$QCOW2_NAME" --capacity "$VOLUME_SIZE" --format qcow2

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi

                printf "${GREEN}Attaching %s to %s${NC}\n\n" "$QCOW2_NAME" "$candidate"

                virsh --quiet attach-disk "$candidate" "$QCOW2_PATH" "$VM_DEV" \
                --driver qemu --subdriver qcow2 --targetbus virtio --persistent

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi
            fi
        fi
	done
}

checkservice_cmd() {
	NUM_ARGS=2

	if [ $# -ne $NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need exactly $NUM_ARGS)${NC}\n\n"
		show_usage check-service
	fi

	PARAM=$(echo "$1" | awk -F= '{print $1}')
	VALUE=$(echo "$1" | awk -F= '{print $2}')

	if [ "$PARAM" != "--port" ]; then
		printf "\n${RED}I do not recognize this '$PARAM' argument${NC}\n\n"
		show_usage check-service
	else
		if [ -z "$VALUE" ]; then
			printf "${RED}Invalid TCP port${NC}\n"
			exit 1
		fi
        TCP_PORT=$VALUE
	fi

	VM="$2"

    is_name_valid "$VM"
    if [ $? == 0 ]; then
        printf "${RED}%s is not a valid VM name${NC}\n" "$VM"
        exit 1
    fi

    ALL_ACTIVE_VMs=$(virsh list --name)

    is_a_member "$VM" "$ALL_ACTIVE_VMs"

	if [ $? == 0 ]; then
		printf "${RED}%s is not an active VM${NC}\n" "$VM"
		exit 1
	fi

	nc -z -w 1 "$VM" "$TCP_PORT" > /dev/null 2>&1

	if [ $? == 0 ]; then
		printf "${GREEN}%s is accepting packets on port %d/TCP${NC}\n" "$VM" "$TCP_PORT"
	else
		printf "${RED}%s is not accepting packets on port %d/TCP${NC}\n" "$VM" "$TCP_PORT"
	fi
}

clone_cmd() {
	LOWEST_NUM_ARGS=3

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage clone
	fi

	TEMPLATE_VM=""
	CLONE_POOL_NAME=""

	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do

		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')

		case $PARAM in
			--template)
				if [ -z "$VALUE" ]; then
					printf "${RED}Template name not specified${NC}\n"
					exit 1
				fi
                is_name_valid "$VALUE"
                if [ $? == 0 ]; then
                    printf "${RED}%s is not a valid template name${NC}\n" "$VALUE"
                    exit 1
                fi
                ALL_INACTIVE_VMs=$(virsh list --name --inactive)
                is_a_member "$VALUE" "$ALL_INACTIVE_VMs"
				if [ $? == 0 ]; then
					printf "${RED}Template should be an existing inactive VM${NC}\n"
					exit 1
				fi
                TEMPLATE_VM=$VALUE
            ;;
			--target-pool)
				if [ -z "$VALUE" ]; then
					printf "${RED}Target pool not specified${NC}\n"
					exit 1
				fi
                is_name_valid "$VALUE"
                if [ $? == 0 ]; then
                    printf "${RED}%s is not a valid pool name${NC}\n" "$VALUE"
                    exit 1
                fi
                ALL_ACTIVE_POOLS=$(virsh pool-list --name)
                is_a_member "$VALUE" "$ALL_ACTIVE_POOLS"
				if [ $? == 0 ]; then
					printf "${RED}I cannot seem to find pool %s${NC}\n" "$VALUE"
					exit 1
				fi
                CLONE_POOL_NAME=$VALUE
            ;;
			*)
				printf "\n${RED}I do not recognize this '%s' argument${NC}\n\n" "$PARAM"
				show_usage clone
			;;
		esac
		shift
	done

	if [ -z "$TEMPLATE_VM" ] || [ -z "$CLONE_POOL_NAME" ]; then
		printf "\n${RED}One of the required arguments is not set${NC}\n\n"
		show_usage clone
	fi

	TEMPLATE_POOL_NAME=""
	TEMPLATE_POOL_PATH=""
	TEMPLATE_VOLUME_PATH=$(virsh dumpxml "$TEMPLATE_VM" | grep "<source file='" | awk -F "='" '{ print $2 }' | awk -F "'/>" '{ print $1 }')

	for pool in $ALL_ACTIVE_POOLS; do
		VOLUMES_IN_POOL=$(virsh vol-list "$pool")
		TEMPLATE_VOLUME_IN_LIST=$(echo "$VOLUMES_IN_POOL" | grep "$TEMPLATE_VOLUME_PATH")
		if [ -n "$TEMPLATE_VOLUME_IN_LIST" ]; then
			TEMPLATE_POOL_NAME=$pool
			TEMPLATE_POOL_PATH=$(virsh pool-dumpxml "$pool" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')
			ALL_ACTIVE_POOLS=""
		fi
	done

    ALL_VMs=$(virsh list --name --all)
	TEMPLATE_VOLUME_NAME=$(echo "$TEMPLATE_VOLUME_PATH" | awk -F "${TEMPLATE_POOL_PATH}/" '{ print $2 }')
	CLONE_POOL_PATH=$(virsh pool-dumpxml "$CLONE_POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_VMs"
            if [ $? == 1 ]; then
                printf "${YELLOW}There is already a VM %s, so I am skipping that one${NC}\n" "$candidate"
            else
                CLONE_VOLUME_NAME="$candidate".qcow2

                printf "${GREEN}Cloning %s into %s${NC}\n" "$TEMPLATE_VOLUME_NAME" "$CLONE_VOLUME_NAME"

                virsh --quiet vol-clone --pool "$TEMPLATE_POOL_NAME" "$TEMPLATE_VOLUME_NAME" "$CLONE_VOLUME_NAME"

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi

                if [ "$TEMPLATE_POOL_PATH" != "$CLONE_POOL_PATH" ]; then
                    printf "${GREEN}Moving %s between pools (%s ==> %s)${NC}\n" "$CLONE_VOLUME_NAME" "$TEMPLATE_POOL_NAME" "$CLONE_POOL_NAME"

                    sudo mv "$TEMPLATE_POOL_PATH"/"$CLONE_VOLUME_NAME" "$CLONE_POOL_PATH"/

                    if [ $? -ne 0 ]; then
                        printf "${RED}Operation failed, mv returned error code %d, terminating now.${NC}\n" $ERROR_CODE
                        exit 2
                    fi

                    virsh --quiet pool-refresh "$TEMPLATE_POOL_NAME"
                    virsh --quiet pool-refresh "$CLONE_POOL_NAME"
                fi

                printf "${GREEN}Cloning %s into %s and attaching %s to it${NC}\n" "$TEMPLATE_VM" "$candidate" "$CLONE_VOLUME_NAME"

                virt-clone --quiet -o "$TEMPLATE_VM" -n "$candidate" --preserve-data -f "$CLONE_POOL_PATH"/"$CLONE_VOLUME_NAME"

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virt-clone returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi

                printf "${GREEN}Setting hostname for %s (this may take a while)${NC}\n\n" "$candidate"

                sudo virt-customize --quiet -d "$candidate" --hostname "$candidate"

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virt-customize returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi
            fi
        fi
	done
}

deactivate_cmd() {
	LOWEST_NUM_ARGS=1

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage deactivate
	fi

	ALL_ACTIVE_VMs=$(virsh list --name)

	if [ -z "$ALL_ACTIVE_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single active VM (is LIBVIRT_DEFAULT_URI set?)${NC}\n\n"
		show_usage deactivate
	fi

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_ACTIVE_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}%s is not an active VM${NC}\n" "$candidate"
            else
                printf "${GREEN}Shutting down %s${NC}\n" "$candidate"

                virsh --quiet shutdown $candidate

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi
            fi
        fi
	done
}

define_cmd() {

	LOWEST_NUM_ARGS=7

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n\n"
		show_usage define
	fi

	MEMORY_SIZE=""
	CPU_CORES=""
	VOLUME_CAPACITY=""
	LIBVIRT_NETWORK=""
	OS_VARIANT=""
	POOL_NAME=""

	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do

		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')

		case $PARAM in
			--ram)
				if [ -z "$VALUE" ]; then
					printf "${RED}Invalid memory size${NC}\n"
					exit 1
				fi
				MEMORY_SIZE=$VALUE
            ;;
			--cores)
				if [ -z "$VALUE" ]; then
					printf "${RED}Invalid CPU core count${NC}\n"
					exit 1
				fi
				CPU_CORES=$VALUE
            ;;
			--disk-size)
				if [ -z "$VALUE" ]; then
					printf "${RED}Invalid volume size${NC}\n"
					exit 1
				fi
				VOLUME_CAPACITY=$VALUE
            ;;
			--network)
                if [ -z "$VALUE" ]; then
                    printf "${RED}Network name not specified${NC}\n"
                    exit 1
                fi
                is_name_valid "$VALUE"
				if [ $? == 0 ]; then
					printf "${RED}%s is not a valid network name${NC}\n" "$VALUE"
					exit 1
				fi
				ALL_ACTIVE_NETWORKS=$(virsh net-list --name)
                is_a_member "$VALUE" "$ALL_ACTIVE_NETWORKS"
				if [ $? == 0 ]; then
					printf "${RED}I cannot seem to find network %s${NC}\n" "$VALUE"
					exit 1
				fi
                LIBVIRT_NETWORK=$VALUE
            ;;
			--guest-os)
				if [ -z "$VALUE" ]; then
					printf "${RED}OS variant not specified${NC}\n"
					exit 1
				fi
                if [ -n "$(echo "${VALUE:0:1}" | tr -d "[:alnum:]")" ] || [ -n "$(echo "$VALUE" | tr -d "[:alnum:]-_.")" ]; then
                    printf "${RED}%s is not a valid OS variant name${NC}\n" "$VALUE"
                    exit 1
                fi
				ALL_OS_VARIANTS=$(osinfo-query os -f short-id)
                is_a_member "$VALUE" "$ALL_OS_VARIANTS"
				if [ $? == 0 ]; then
					printf "${RED}I do not recognize OS variant %s${NC}\n" "$VALUE"
					exit 1
				fi
                OS_VARIANT=$VALUE
			;;
			--pool)
				if [ -z "$VALUE" ]; then
					printf "${RED}Pool name not specified${NC}\n"
					exit 1
				fi
				is_name_valid "$VALUE"
                if [ $? == 0 ]; then
                    printf "${RED}%s is not a valid pool name${NC}\n" "$VALUE"
                    exit 1
                fi
				ALL_ACTIVE_POOLS=$(virsh pool-list --name)
                is_a_member "$VALUE" "$ALL_ACTIVE_POOLS"
				if [ $? == 0 ]; then
					printf "${RED}I cannot seem to find pool %s${NC}\n" "$VALUE"
					exit 1
				fi
                POOL_NAME=$VALUE
			;;
			*)
				printf "\n${RED}I do not recognize this '%s' argument${NC}\n\n" "$PARAM"
				show_usage define
			;;
		esac
		shift
	done

	if [ -z "$MEMORY_SIZE" ] || [ -z "$CPU_CORES" ] || [ -z "$VOLUME_CAPACITY" ] \
    || [ -z "$LIBVIRT_NETWORK" ] || [ -z "$OS_VARIANT" ] || [ -z "$POOL_NAME" ]; then
		printf "\n${RED}One of the required arguments is not set${NC}\n\n"
		show_usage define
	fi

	ALL_VMs=$(virsh list --name --all)
	POOL_PATH=$(virsh pool-dumpxml "$POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_VMs"
            if [ $? == 1 ]; then
                printf "${YELLOW}There is already a VM %s, so I am skipping that one${NC}\n" "$candidate"
            else    
                RANDOM_ALPHANUM=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n')
                XML_PATH="$candidate"_"$RANDOM_ALPHANUM".xml
                QCOW2_NAME="$candidate".qcow2
                QCOW2_PATH="$POOL_PATH"/"$QCOW2_NAME"

                printf "${GREEN}Creating volume %s for VM %s${NC}\n" "$QCOW2_NAME" "$candidate"

                virsh --quiet vol-create-as "$POOL_NAME" --name "$QCOW2_NAME" --capacity "$VOLUME_CAPACITY" --format qcow2

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    exit 2
                fi

                printf "${GREEN}Coming up with a detailed XML description of %s${NC}\n" "$candidate"

                virt-install --quiet --name "$candidate" --os-variant "$OS_VARIANT" \
                --memory "$MEMORY_SIZE" --cpu host --vcpus="$CPU_CORES" --network network="$LIBVIRT_NETWORK",model=virtio \
                --disk "$QCOW2_PATH",bus=virtio --boot network,hd --print-xml 1 > ~/"$XML_PATH"

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virt-install returned error code %d, terminating now.${NC}\n" $?
                    rm -f ~/"$XML_PATH"
                    exit 2
                fi

                printf "${GREEN}Retracting sound card & tablet input devices from XML description${NC}\n"

                sed -i /"<sound model"/d ~/"$XML_PATH"
                sed -i /'<input type="tablet'/d ~/"$XML_PATH"

                printf "${GREEN}Defining VM %s${NC}\n\n" "$candidate"

                virsh --quiet define ~/"$XML_PATH" --validate

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d, terminating now.${NC}\n" $?
                    rm -f ~/"$XML_PATH"
                    exit 2
                fi

                rm -f ~/"$XML_PATH"
            fi
        fi
	done
}

getmac_cmd() {
	LOWEST_NUM_ARGS=1

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage getmac
	fi

	ALL_VMs=$(virsh list --name --all)

	if [ -z "$ALL_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)${NC}\n\n"
		show_usage getmac
	fi

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}I cannot seem to find VM %s${NC}\n" "$candidate"
            else
                MAC_ADDR=$(virsh --quiet dumpxml "$candidate" | grep "mac address" \
                | awk -F "<mac address='" '{ print $2 }' | awk -F "'/>" '{ print $1 }')
                printf "${GREEN}%s looks like %s${NC}\n" "$candidate" "$MAC_ADDR"
            fi
        fi
	done
}

ping_cmd() {
	LOWEST_NUM_ARGS=2

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage ping
	fi

	PARAM=$(echo "$1" | awk -F= '{print $1}')
	VALUE=$(echo "$1" | awk -F= '{print $2}')

	if [ "$PARAM" != "--count" ]; then
		printf "\n${RED}I do not recognize this '%s' argument${NC}\n\n" "$PARAM"
		show_usage ping
    fi

    if [ -z "$VALUE" ]; then
        printf "${RED}Invalid number of packets${NC}\n"
        exit 1
    fi

    HOW_MANY="$VALUE"

	ALL_ACTIVE_VMs=$(virsh list --name)

	if [ -z "$ALL_ACTIVE_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI properly set?)${NC}\n\n"
		show_usage ping
	fi

    shift

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_ACTIVE_VMs" 
            if [ $? == 0 ]; then
                printf "${YELLOW}%s is not an active VM${NC}\n" "$candidate"
            else
                printf "${GREEN}Now pinging %s${NC}\n" "$candidate"
                /usr/bin/ping -c "$HOW_MANY" "$candidate"
            fi
        fi
	done
}

reboot_cmd() {

	LOWEST_NUM_ARGS=1

	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "\n${RED}Incorrect number of arguments (I need at least %d)${NC}\n\n" $LOWEST_NUM_ARGS
		show_usage reboot
	fi

	ALL_ACTIVE_VMs=$(virsh list --name)

	if [ -z "$ALL_ACTIVE_VMs" ]; then
		printf "\n${RED}I cannot seem to find a single active VM (is LIBVIRT_DEFAULT_URI set?)${NC}\n\n"
		show_usage reboot
	fi

	for candidate; do
        is_name_valid "$candidate"
        if [ $? == 0 ]; then
            printf "${YELLOW}%s is not a valid VM name${NC}\n" "$candidate"
        else
            is_a_member "$candidate" "$ALL_ACTIVE_VMs"
            if [ $? == 0 ]; then
                printf "${YELLOW}%s is not an active VM${NC}\n" "$candidate"
            else
                printf "${GREEN}Rebooting active VM %s${NC}\n" "$candidate"

                virsh --quiet reboot "$candidate";

                if [ $? -ne 0 ]; then
                    printf "${RED}Operation failed, virsh returned error code %d${NC}\n" $?
                else
                    sleep 1
                fi
            fi
        fi
	done
}

case "$1" in
	activate)
		shift
		activate_cmd "$@"
		;;
	annihilate)
		shift
		annihilate_cmd "$@"
		;;
	attach)
		shift
		attach_cmd "$@"
		;;
	check-service)
		shift
		checkservice_cmd "$@"
		;;
	clone)
		shift
		clone_cmd "$@"
		;;
	deactivate)
		shift
		deactivate_cmd "$@"
		;;
	define)
		shift
		define_cmd "$@"
		;;
	getmac)
		shift
		getmac_cmd "$@"
		;;
	ping)
		shift
		ping_cmd "$@"
		;;
	reboot)
		shift
		reboot_cmd "$@"
		;;
	*)
		show_usage help
		;;
esac
