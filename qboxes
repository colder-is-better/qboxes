#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

BFACE=$(tput bold)
NFACE=$(tput sgr0)

show_usage() {
	case "$1" in
		activate)
			printf "COMMAND NAME\n"
			printf "  activate - bring inactive VMs up\n\n"
			printf "SYNOPSIS\n"
			printf "  activate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Power one or more inactive VMs up\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes activate leap423 sles11sp4${NFACE}\n"
			printf "  INFO: Powering inactive VM leap423 up\n"
			printf "  INFO: Powering inactive VM sles11sp4 up\n"
			printf "  SUMMARY: 2 VM(s) successfully activated.\n\n"
			exit 1
			;;
		annihilate)
			printf "COMMAND NAME\n"
			printf "  annihilate - remove any trace of inactive VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  annihilate <inactive_VM_1> ... <inactive_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Undefine one or more inactive VMs, delete all snapshots and associated storage volumes\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes annihilate guest_{1..5}${NFACE}\n" 
			printf "  INFO: Annihilating guest_1 (this may take a while)\n"
			printf "  INFO: Annihilating guest_2 (this may take a while)\n"
			printf "  INFO: Annihilating guest_3 (this may take a while)\n"
			printf "  WARNING: guest_4 is not an inactive VM\n"
			printf "  WARNING: guest_5 is not an inactive VM\n"
			printf "  SUMMARY: 3 VM(s) successfully annihilated.\n\n"
			exit 1
			;;
		attach)
			printf "COMMAND NAME\n"
			printf "  attach - attach storage volumes to VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  attach --name=<volume_name> --size=<volume_size> --pool=<name> --vmdev=<VM_device> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Create sparse QCOW2 files in specified pool, attach them as virtual hard drives to VMs\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes attach --name=data --size=4096G --pool=services --vmdev=vdb osd_node_{1,2,3}${NFACE}\n"
			printf "  INFO: Creating QCOW2 image osd_node_1_vdb_data_4096G.qcow2 for osd_node_1\n"
			printf "  INFO: Attaching osd_node_1_vdb_data_4096G.qcow2 to osd_node_1\n\n"
			printf "  INFO: Creating QCOW2 image osd_node_2_vdb_data_4096G.qcow2 for osd_node_2\n"
			printf "  INFO: Attaching osd_node_2_vdb_data_4096G.qcow2 to osd_node_2\n\n"
			printf "  INFO: Creating QCOW2 image osd_node_3_vdb_data_4096G.qcow2 for osd_node_3\n"
			printf "  INFO: Attaching osd_node_3_vdb_data_4096G.qcow2 to osd_node_3\n\n"
			printf "  SUMMARY: 3 storage volume(s) successfully attached.\n\n"
			exit 1
			;;
		check-service)
			printf "COMMAND NAME\n"
			printf "  check-service - check if connections to specified TCP port of a VM are possible\n\n"
			printf "SYNOPSIS\n";
			printf "  check-service --port=<tcp_port> <active_VM>\n\n";
			printf "DESCRIPTION\n";
			printf "  Check if given VM is reachable via specificied TCP port\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes check-service --port=22 smt-server${NFACE}\n"
			printf "  INFO: smt-server is accepting packets on port 22/TCP\n\n"
			exit 1
			;;
		clone)
			printf "COMMAND NAME\n"
			printf "  clone - clone a template VM into one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  clone --template=<VM_0> --pool=<pool_name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Clone an existing template VM into one or more new VMs, indicate an existing storage pool for the cloned volumes\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes clone --template=sles12sp3 --pool=services www_server_1 www_server_2 balancer${NFACE}\n"
			printf "  INFO: Cloning sles12sp3.qcow2 into www_server_1.qcow2\n"
			printf "  INFO: Moving www_server_1.qcow2 between pools (qcow2-images ==> services)\n"
			printf "  INFO: Cloning sles12sp3 into www_server_1 and attaching www_server_1.qcow2 to it\n"
			printf "  INFO: Setting hostname for www_server_1 (this may take a while)\n\n"
			printf "  INFO: Cloning sles12sp3.qcow2 into www_server_2.qcow2\n"
			printf "  INFO: Moving www_server_2.qcow2 between pools (qcow2-images ==> services)\n"
			printf "  INFO: Cloning sles12sp3 into www_server_2 and attaching www_server_2.qcow2 to it\n"
			printf "  INFO: Setting hostname for www_server_2 (this may take a while)\n\n"
			printf "  INFO: Cloning sles12sp3.qcow2 into balancer.qcow2\n"
			printf "  INFO: Moving balancer.qcow2 between pools (qcow2-images ==> services)\n"
			printf "  INFO: Cloning sles12sp3 into balancer and attaching balancer.qcow2 to it\n"
			printf "  INFO: Setting hostname for balancer (this may take a while)\n\n"
			printf "  SUMMARY: 3 VM(s) successfully cloned from template VM sles12sp3.\n\n"
			exit 1
			;;
		deactivate)
			printf "COMMAND NAME\n"
			printf "  deactivate - shutdown active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  deactivate <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Try to gracefully shutdown one or more active VMs\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes deactivate leap423${NFACE}\n"
			printf "  INFO: Shutting active VM leap423 down\n"
			printf "  SUMMARY: 1 VM(s) successfully deactivated.\n\n"
			exit 1
			;;
		define)
			printf "COMMAND NAME\n"
			printf "  define - define one or more new VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  define --ram=<size> --cores=<count> --disk-size=<capacity> --network=<name> --guest-os=<os_variant> --pool=<name> <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Define one or more VMs according to specifications, do not install a guest OS on any of them\n"
			printf "  (Tip: Type ${BFACE}osinfo-query os${NFACE} for a list of all the supported OS variants)\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes define --ram=2048 --cores=2 --disk-size=1024G --network=grimsey --guest-os=opensuse42.3 --pool=services osd_node_{1..5}${NFACE}\n"
			printf "  WARNING: There is already a VM osd_node_1, so I am skipping this one\n"
			printf "  WARNING: There is already a VM osd_node_2, so I am skipping this one\n"
			printf "  WARNING: There is already a VM osd_node_3, so I am skipping this one\n"
			printf "  INFO: Creating volume osd_node_4.qcow2 for VM osd_node_4\n"
			printf "  INFO: Coming up with a detailed XML description of osd_node_4\n"
			printf "  INFO: Retracting sound card & tablet input devices from XML description\n"
			printf "  INFO: Defining VM osd_node_4\n\n"
			printf "  INFO: Creating volume osd_node_5.qcow2 for VM osd_node_5\n"
			printf "  INFO: Coming up with a detailed XML description of osd_node_5\n"
			printf "  INFO: Retracting sound card & tablet input devices from XML description\n"
			printf "  INFO: Defining VM osd_node_5\n\n"
			printf "  SUMMARY: 2 VM(s) successfully defined.\n\n"
			exit 1
			;;
		getmac)
			printf "COMMAND NAME\n"
			printf "  getmac - reveal MAC addresses\n\n"
			printf "SYNOPSIS\n"
			printf "  getmac <VM_1> ... <VM_k>\n\n"
			printf "DESCRIPTION\n"
			printf "  Reveal the first Ethernet adapter's MAC address of one or more VMs\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes getmac sles12sp{1,2,3}${NFACE}\n"
			printf "  INFO: sles12sp1 looks like 52:54:00:b0:c6:59\n"
			printf "  INFO: sles12sp2 looks like 52:54:00:40:e9:eb\n"
			printf "  INFO: sles12sp3 looks like 52:54:00:3b:e3:e1\n\n"
			exit 1
			;;
		ping)
			printf "COMMAND NAME\n"
			printf "  ping - send ICMP packets to active VMs\n\n"
			printf "SYNOPSIS\n"
			printf "  ping --count=<number_of_packets> <active_VM_1> ... <active_VM_k>\n\n"
			printf "DESCRIPTION\n"
        		printf "  Send a specified number of ICMP packets to one or more active VMs\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes ping --count=3 sles12sp2 sles12sp3${NFACE}\n"
			printf "  WARNING: sles12sp2 is not an active VM\n"
			printf "  INFO: Now pinging sles12sp3\n"
			printf "  PING sles12sp3.grimsey.is (10.20.30.213) 56(84) bytes of data.\n"
			printf "  64 bytes from sles12sp3.grimsey.is (10.20.30.213): icmp_seq=1 ttl=64 time=0.169 ms\n"
			printf "  64 bytes from sles12sp3.grimsey.is (10.20.30.213): icmp_seq=2 ttl=64 time=0.151 ms\n"
			printf "  64 bytes from sles12sp3.grimsey.is (10.20.30.213): icmp_seq=3 ttl=64 time=0.217 ms\n\n"
			printf "  --- sles12sp3.grimsey.is ping statistics ---\n"
			printf "  3 packets transmitted, 3 received, 0 percent packet loss, time 1998ms\n"
			printf "  rtt min/avg/max/mdev = 0.151/0.179/0.217/0.027 ms\n\n"
        		exit 1
			;;
		reboot)
			printf "COMMAND NAME\n";
			printf "  reboot - restart active VMs\n\n";
        		printf "SYNOPSIS\n";
        		printf "  reboot <active_VM_1> ... <active_VM_k>\n\n";
        		printf "DESCRIPTION\n";
        		printf "  Try to gracefully restart one or more active VMs\n\n"
			printf "EXAMPLE\n"
			printf "  ~/bin> ${BFACE}qboxes reboot sles12sp3${NFACE}\n"
			printf "  INFO: Rebooting active VM sles12sp3\n"
			printf "  SUMMARY: 1 VM(s) successfully rebooted.\n\n"
        		exit 1
			;;
		*)
			printf "\nThis is ${GREEN}qboxes${NC}, a simple command line tool for managing local QEMU/KVM VMs.\n"
			printf "Currently the following commands are implemented:\n\n"
			printf "  activate\t: bring inactive VMs up\n"
			printf "  annihilate\t: remove any trace of inactive VMs\n"
			printf "  attach\t: attach storage volumes to VMs\n"
			printf "  check-service\t: check if connections to specified TCP port of a VM are possible\n"
			printf "  clone\t\t: clone a template VM into one or more new VMs\n"
			printf "  deactivate\t: shutdown active VMs\n"
			printf "  define\t: define one or more new VMs\n"
			printf "  getmac\t: reveal MAC addresses\n"
			printf "  ping\t\t: send ICMP packets to active VMs\n"
			printf "  reboot\t: restart active VMs\n\n"
			printf "  help\t\t: display this summary of commands\n\n"
			printf "Type ${GREEN}qboxes command_name${NC} for the syntax and a usage example of a specific command.\n\n"
			;;
	esac
}

activate_func() {
	LOWEST_NUM_ARGS=1
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage activate
	fi

	ALL_INACTIVE_VMS=$(virsh list --name --inactive)
	if [ "$ALL_INACTIVE_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single inactive VM (is LIBVIRT_DEFAULT_URI set?)\n"
		show_usage activate
	fi

	VMs_ACTIVATED=0
	for candidate; do
		VM_EXISTS=$(echo "$ALL_INACTIVE_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} $candidate is not an inactive VM\n"
		else
			printf "${GREEN}INFO:${NC} Powering inactive VM $candidate up\n"

			virsh --quiet start "$candidate"

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE\n"
			else
				VMs_ACTIVATED=$((VMs_ACTIVATED + 1))
			fi
			sleep 1
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VMs_ACTIVATED VM(s) successfully activated.\n"
}

annihilate_func() {
	LOWEST_NUM_ARGS=1
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage annihilate
	fi

	ALL_INACTIVE_VMS=$(virsh list --name --inactive)
	if [ "$ALL_INACTIVE_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single inactive VM (is LIBVIRT_DEFAULT_URI set?)\n"
		show_usage annihilate
	fi

	VMs_ANNIHILATED=0
	for candidate; do
		VM_EXISTS=$(echo "$ALL_INACTIVE_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} $candidate is not an inactive VM\n"
		else
			printf "${GREEN}INFO:${NC} Annihilating ${candidate} (this may take a while)\n"

			ALL_SNAPSHOTS=$(virsh snapshot-list --name "$candidate")
			if [ "$ALL_SNAPSHOTS" != "" ]; then
				for each_snapshot in "$ALL_SNAPSHOTS"; do
				
					virsh --quiet snapshot-delete --domain "$candidate" --snapshotname "$each_snapshot"

					VIRSH_ERROR_CODE="$?"
					if [ $VIRSH_ERROR_CODE -ne 0 ]; then
						printf "${RED}ERROR:${NC} Failed to delete snapshot ${each_snapshot} of ${candidate}, virsh returned error code $VIRSH_ERROR_CODE, terminating now.\n"
						exit 2
					fi
				done
			fi
			virsh --quiet undefine "$candidate" --remove-all-storage --wipe-storage

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE, terminating now.\n"
				exit 2
			fi
			VMs_ANNIHILATED=$((VMs_ANNIHILATED + 1))
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VMs_ANNIHILATED VM(s) successfully annihilated.\n"
}

attach_func() {
	LOWEST_NUM_ARGS=5
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage attach
	fi

	VOLUME_NAME=""
	VOLUME_SIZE=""
	POOL_NAME=""
	VM_DEV=""

	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do
		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')
		case $PARAM in
			--name)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid volume name\n"
					exit 1
				fi
				VOLUME_NAME=$VALUE
				;;
			--size)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid volume size\n"
					exit 1
				fi
				VOLUME_SIZE=$VALUE
				;;
			--pool)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid pool name\n"
					exit 1
				fi
				POOL_NAME=$VALUE
				POOL_EXISTS=$(virsh pool-list | grep -w "$POOL_NAME")
				if [ "$POOL_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} I cannot seem to find pool $POOL_NAME\n"
					exit 1
				fi
				;;
			--vmdev)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid device file\n"
					exit 1
				fi
				VM_DEV=$VALUE
				;;
			*)
				printf "${RED}ERROR:${NC} I do not recognize this '$PARAM' argument\n"
				show_usage attach
				;;
		esac
		shift
	done

	if [ "$VOLUME_NAME" == "" ] || [ "$VOLUME_SIZE" == "" ] || [ "$POOL_NAME" == "" ] || [ "$VM_DEV" == "" ]; then
		printf "${RED}ERROR:${NC} One of the required arguments has not been set\n"
		show_usage attach
	fi

	ALL_VMS=$(virsh list --name --all)
	if [ "$ALL_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI properly set?)\n"
		show_usage attach
	fi

	POOL_PATH=$(virsh pool-dumpxml "$POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')
	VOLUMES_ATTACHED=0
	for candidate; do
		VM_EXISTS=$(echo "$ALL_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} VM $candidate does not seem to exist\n"
		else
			QCOW2_NAME="$candidate"_"$VM_DEV"_"$VOLUME_NAME"_"$VOLUME_SIZE".qcow2
			QCOW2_PATH="$POOL_PATH"/"$QCOW2_NAME"
			printf "${GREEN}INFO:${NC} Creating QCOW2 image $QCOW2_NAME for $candidate\n"

			virsh --quiet vol-create-as "$POOL_NAME" --name "$QCOW2_NAME" --capacity "$VOLUME_SIZE" --format qcow2

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE, terminating now.\n"
				exit 2
			fi
			printf "${GREEN}INFO:${NC} Attaching $QCOW2_NAME to $candidate\n\n"

			virsh --quiet attach-disk "$candidate" "$QCOW2_PATH" "$VM_DEV" --driver qemu --subdriver qcow2 --targetbus virtio --persistent

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE, terminating now.\n"
				exit 2
			fi
			VOLUMES_ATTACHED=$((VOLUMES_ATTACHED + 1))
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VOLUMES_ATTACHED storage volume(s) successfully attached.\n"
}

checkservice_func() {
	NUM_ARGS=2
	if [ $# -ne $NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need exactly $NUM_ARGS)\n"
		show_usage check-service
	fi

	PARAM=$(echo "$1" | awk -F= '{print $1}')
	VALUE=$(echo "$1" | awk -F= '{print $2}')
	if [ "$PARAM" != "--port" ]; then
		printf "${RED}ERROR:${NC} I do not recognize this '$PARAM' argument\n"
		show_usage check-service
	else
		if [ "$VALUE" == "" ]; then
			printf "${RED}ERROR:${NC} Invalid TCP port\n"
			exit 1
		else
			TCP_PORT=$VALUE
		fi
	fi

	VM="$2"
	IS_ACTIVE=$(virsh list --name | grep -w "$VM")
	if [ "$IS_ACTIVE" == "" ]; then
		printf "${RED}ERROR:${NC} $VM is not an active VM\n"
		exit 2
	fi

	nc -z -w 1 "$VM" "$TCP_PORT" > /dev/null 2>&1

	ERROR_CODE="$?"
	if [ $ERROR_CODE == 0 ]; then
		printf "${GREEN}INFO:${NC} $VM is ${GREEN}accepting${NC} packets on port $TCP_PORT/TCP\n"
	else
		printf "${GREEN}INFO:${NC} $VM is ${RED}not accepting${NC} packets on port $TCP_PORT/TCP\n"
	fi
	exit $ERROR_CODE
}

clone_func() {
	LOWEST_NUM_ARGS=3
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage clone
	fi

	TEMPLATE_VM=""
	CLONE_POOL_NAME=""
	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do
		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')
		case $PARAM in
			--template)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid template name\n"
					exit 1
				fi

				TEMPLATE_VM=$VALUE
				TEMPLATE_EXISTS=$(virsh list --name --inactive | grep -w "$TEMPLATE_VM")
				if [ "$TEMPLATE_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} Template should be an existing inactive VM\n"
					exit 1
				fi
				;;
			--pool)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid pool name\n"
					exit 1
				fi

				CLONE_POOL_NAME=$VALUE
				POOL_EXISTS=$(virsh pool-list | grep -w "$CLONE_POOL_NAME")
				if [ "$POOL_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} I cannot seem to find pool $CLONE_POOL_NAME\n"
					exit 1
				fi
				;;
			*)
				printf "${RED}ERROR:${NC} I do not recognize this '$PARAM' argument\n"
				show_usage clone
				;;
		esac
		shift
	done

	if [ "$TEMPLATE_VM" == "" ] || [ "$CLONE_POOL_NAME" == "" ]; then
		printf "${RED}ERROR:${NC} One of the required arguments is not set\n"
		show_usage clone
	fi

	TEMPLATE_POOL_NAME=""
	TEMPLATE_POOL_PATH=""
	TEMPLATE_VOLUME_PATH=$(virsh dumpxml "$TEMPLATE_VM" | grep "<source file='" | awk -F "='" '{ print $2 }' | awk -F "'/>" '{ print $1 }')
	ALL_POOLS=$(virsh pool-list --name)

	for pool in $ALL_POOLS; do
		VOLUMES_IN_POOL=$(virsh vol-list "$pool")
		TEMPLATE_VOLUME_IN_LIST=$(echo "$VOLUMES_IN_POOL" | grep "$TEMPLATE_VOLUME_PATH")
		if [ "$TEMPLATE_VOLUME_IN_LIST" != "" ]; then
			TEMPLATE_POOL_NAME=$pool
			TEMPLATE_POOL_PATH=$(virsh pool-dumpxml "$pool" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')
			ALL_POOLS=""
		fi
	done

	TEMPLATE_VOLUME_NAME=$(echo "$TEMPLATE_VOLUME_PATH" | awk -F "${TEMPLATE_POOL_PATH}/" '{ print $2 }')
	CLONES_CREATED=0
	ALL_VMS=$(virsh list --name --all)
	CLONE_POOL_PATH=$(virsh pool-dumpxml "$CLONE_POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')

	for candidate; do
		VM_EXISTS=$(echo "$ALL_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" != "" ]; then
			printf "${YELLOW}WARNING:${NC} There is already a VM $candidate, so I am skipping this one\n"
		else
			CLONE_VOLUME_NAME="$candidate".qcow2

			printf "${GREEN}INFO:${NC} Cloning $TEMPLATE_VOLUME_NAME into $CLONE_VOLUME_NAME\n"

			virsh --quiet vol-clone --pool "$TEMPLATE_POOL_NAME" "$TEMPLATE_VOLUME_NAME" "$CLONE_VOLUME_NAME"

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $ERROR_CODE, terminating now.\n"
				exit 2
			fi

			if [ "$TEMPLATE_POOL_PATH" != "$CLONE_POOL_PATH" ]; then
				printf "${GREEN}INFO:${NC} Moving $CLONE_VOLUME_NAME between pools ($TEMPLATE_POOL_NAME ==> $CLONE_POOL_NAME)\n"
				sudo mv "$TEMPLATE_POOL_PATH"/"$CLONE_VOLUME_NAME" "$CLONE_POOL_PATH"/

				ERROR_CODE="$?"
				if [ $ERROR_CODE -ne 0 ]; then
					printf "${RED}ERROR:${NC} Operation failed, mv returned error code $ERROR_CODE, terminating now.\n"
					exit 2
				fi

				virsh --quiet pool-refresh "$TEMPLATE_POOL_NAME"
				virsh --quiet pool-refresh "$CLONE_POOL_NAME"
			fi

			printf "${GREEN}INFO:${NC} Cloning $TEMPLATE_VM into $candidate and attaching $CLONE_VOLUME_NAME to it\n"

			virt-clone --quiet -o "$TEMPLATE_VM" -n "$candidate" --preserve-data -f "$CLONE_POOL_PATH"/"$CLONE_VOLUME_NAME"

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virt-clone returned error code $ERROR_CODE, terminating now.\n"
				exit 2
			fi

			printf "${GREEN}INFO:${NC} Setting hostname for ${candidate} (this may take a while)\n\n"

			sudo virt-customize --quiet -d "$candidate" --hostname "$candidate"

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virt-customize returned error code $ERROR_CODE\n"
			fi

			CLONES_CREATED=$((CLONES_CREATED + 1))
		fi
	done

	printf "${GREEN}SUMMARY:${NC} $CLONES_CREATED VM(s) successfully cloned from template VM $TEMPLATE_VM.\n"
}

deactivate_func() {
	LOWEST_NUM_ARGS=1
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage deactivate
	fi

	ALL_ACTIVE_VMS=$(virsh list --name)
	if [ "$ALL_ACTIVE_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single active VM (is LIBVIRT_DEFAULT_URI set?)\n"
		show_usage deactivate
	fi

	VMs_DEACTIVATED=0
	for candidate; do
		VM_EXISTS=$(echo "$ALL_ACTIVE_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} $candidate is not an active VM\n"
		else
			printf "${GREEN}INFO:${NC} Shutting active VM $candidate down\n"

			virsh --quiet shutdown $candidate

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE\n"
			else
				VMs_DEACTIVATED=$((VMs_DEACTIVATED + 1))
			fi
			sleep 1
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VMs_DEACTIVATED VM(s) successfully deactivated.\n"
}

define_func() {
	LOWEST_NUM_ARGS=7
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage define
	fi

	MEMORY_SIZE=""
	CPU_CORES=""
	VOLUME_CAPACITY=""
	LIBVIRT_NETWORK=""
	OS_VARIANT=""
	POOL_NAME=""

	for ((argument=1 ; argument <= $((LOWEST_NUM_ARGS - 1)) ; argument++)); do
		PARAM=$(echo "$1" | awk -F= '{print $1}')
		VALUE=$(echo "$1" | awk -F= '{print $2}')
		case $PARAM in
			--ram)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid memory size\n"
					exit 1
				fi
				MEMORY_SIZE=$VALUE
				;;
			--cores)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid CPU core count\n"
					exit 1
				fi
				CPU_CORES=$VALUE
				;;
			--disk-size)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid volume size\n"
					exit 1
				fi
				VOLUME_CAPACITY=$VALUE
				;;
			--network)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid network name\n"
					exit 1
				fi
				LIBVIRT_NETWORK=$VALUE
				NETWORK_EXISTS=$(virsh net-list | grep -w "$LIBVIRT_NETWORK")
				if [ "$NETWORK_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} I cannot seem to find network $LIBVIRT_NETWORK\n"
					exit 1
				fi
				;;
			--guest-os)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid OS variant\n"
					exit 1
				fi
				OS_VARIANT=$VALUE
				VARIANT_EXISTS=$(osinfo-query os -f short-id | grep -w "$OS_VARIANT")
				if [ "$VARIANT_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} I do not recognize OS variant $OS_VARIANT\n"
					exit 1
				fi
				;;
			--pool)
				if [ "$VALUE" == "" ]; then
					printf "${RED}ERROR:${NC} Invalid pool name\n"
					exit 1
				fi
				POOL_NAME=$VALUE
				POOL_EXISTS=$(virsh pool-list | grep -w "$POOL_NAME")
				if [ "$POOL_EXISTS" == "" ]; then
					printf "${RED}ERROR:${NC} I cannot seem to find pool $POOL_NAME\n"
					exit 1
				fi
				;;
			*)
				printf "${RED}ERROR:${NC} I do not recognize this '$PARAM' argument\n"
				show_usage define
				;;
		esac
		shift
	done

	if [ "$MEMORY_SIZE" == "" ] || [ "$CPU_CORES" == "" ] || [ "$VOLUME_CAPACITY" == "" ] || [ "$LIBVIRT_NETWORK" == "" ] || [ "$OS_VARIANT" == "" ] || [ "$POOL_NAME" == "" ]; then
		printf "${RED}ERROR:${NC} One of the required arguments is not set\n"
		show_usage define
	fi

	VMs_DEFINED=0
	ALL_VMS=$(virsh list --name --all)
	POOL_PATH=$(virsh pool-dumpxml "$POOL_NAME" | grep "<path>" | awk -F "<path>" '{ print $2 }' | awk -F "</path>" '{ print $1 }')

	for candidate; do
		VM_EXISTS=$(echo "$ALL_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" != "" ]; then
			printf "${YELLOW}WARNING:${NC} There is already a VM $candidate, so I am skipping this one\n"
		else
			RANDOM_ALPHANUM=$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 20 | tr -d '\n')
			XML_PATH="$candidate"_"$RANDOM_ALPHANUM".xml
			QCOW2_NAME="$candidate".qcow2
			QCOW2_PATH="$POOL_PATH"/"$QCOW2_NAME"

			printf "${GREEN}INFO:${NC} Creating volume $QCOW2_NAME for VM $candidate\n"

			virsh --quiet vol-create-as "$POOL_NAME" --name "$QCOW2_NAME" --capacity "$VOLUME_CAPACITY" --format qcow2

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $ERROR_CODE, terminating now.\n"
				exit 2
			fi

			printf "${GREEN}INFO:${NC} Coming up with a detailed XML description of $candidate\n"

			virt-install --quiet --name "$candidate" --os-variant "$OS_VARIANT" \
			--memory "$MEMORY_SIZE" --cpu host --vcpus="$CPU_CORES" --network network="$LIBVIRT_NETWORK",model=virtio \
			--disk "$QCOW2_PATH",bus=virtio --boot network,hd --print-xml 1 > ~/"$XML_PATH"

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virt-install returned error code $ERROR_CODE, terminating now.\n"
				rm -f ~/"$XML_PATH"
				exit 2
			fi

			printf "${GREEN}INFO:${NC} Retracting sound card & tablet input devices from XML description\n"

			sed -i /"<sound model"/d ~/"$XML_PATH"
			sed -i /'<input type="tablet'/d ~/"$XML_PATH"

			printf "${GREEN}INFO:${NC} Defining VM $candidate\n\n"

			virsh --quiet define ~/"$XML_PATH" --validate

			ERROR_CODE="$?"
			if [ $ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $ERROR_CODE, terminating now.\n"
				rm -f ~/"$XML_PATH"
				exit 2
			fi

			rm -f ~/"$XML_PATH"

			VMs_DEFINED=$((VMs_DEFINED + 1))
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VMs_DEFINED VM(s) successfully defined.\n"
}

getmac_func() {
	LOWEST_NUM_ARGS=1
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage getmac
	fi

	ALL_VMS=$(virsh list --name --all)
	if [ "$ALL_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single VM on this host (is LIBVIRT_DEFAULT_URI set?)\n"
		show_usage getmac
	fi

	for candidate; do
		VM_EXISTS=$(echo "$ALL_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} I cannot seem to find this '$candidate' VM\n"
		else
			MAC_ADDR=$(virsh --quiet dumpxml "$candidate" | grep "mac address" | awk -F "<mac address='" '{ print $2 }' | awk -F "'/>" '{ print $1 }')
			printf "${GREEN}INFO:${NC} $candidate looks like $MAC_ADDR\n"
		fi
	done
}

ping_func() {
	LOWEST_NUM_ARGS=2
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage ping
	fi

	PARAM=$(echo "$1" | awk -F= '{print $1}')
	VALUE=$(echo "$1" | awk -F= '{print $2}')

	if [ "$PARAM" != "--count" ]; then
		printf "${RED}ERROR:${NC} I do not recognize this '$PARAM' argument\n"
		show_usage ping
	else
		if [ "$VALUE" == "" ]; then
			printf "${RED}ERROR:${NC} Invalid number of packets\n"
			exit 1
		else
			HOW_MANY="$VALUE"
			shift
		fi
	fi

	ALL_ACTIVE_VMS=$(virsh list --name)
	if [ "$ALL_ACTIVE_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single active VM on this host (is LIBVIRT_DEFAULT_URI properly set?)\n"
		show_usage ping
	fi

	for candidate; do
		VM_EXISTS=$(echo "$ALL_ACTIVE_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} $candidate is not an active VM\n"
		else
			printf "${GREEN}INFO:${NC} Now pinging $candidate\n"
			/usr/bin/ping -c "$HOW_MANY" "$candidate"
		fi
	done
}

reboot_func() {
	LOWEST_NUM_ARGS=1
	if [ $# -lt $LOWEST_NUM_ARGS ]; then
		printf "${RED}ERROR:${NC} Incorrect number of arguments (I need at least $LOWEST_NUM_ARGS)\n"
		show_usage reboot
	fi

	ALL_ACTIVE_VMS=$(virsh list --name)
	if [ "$ALL_ACTIVE_VMS" == "" ]; then
		printf "${RED}ERROR:${NC} I cannot seem to find a single active VM (is LIBVIRT_DEFAULT_URI set?)\n"
		show_usage reboot
	fi

	VMs_DEFINED=0
	for candidate; do
		VM_EXISTS=$(echo "$ALL_ACTIVE_VMS" | grep -w "$candidate")
		if [ "$VM_EXISTS" == "" ]; then
			printf "${YELLOW}WARNING:${NC} $candidate is not an active VM\n"
		else
			printf "${GREEN}INFO:${NC} Rebooting active VM $candidate\n"

			virsh --quiet reboot "$candidate";

			VIRSH_ERROR_CODE="$?"
			if [ $VIRSH_ERROR_CODE -ne 0 ]; then
				printf "${RED}ERROR:${NC} Operation failed, virsh returned error code $VIRSH_ERROR_CODE\n"
			else
				VMs_DEFINED=$((VMs_DEFINED + 1))
			fi
			sleep 1
		fi
	done
	printf "${GREEN}SUMMARY:${NC} $VMs_DEFINED VM(s) successfully rebooted.\n"
}

case "$1" in
	activate)
		shift
		activate_func "$@"
		;;
	annihilate)
		shift
		annihilate_func "$@"
		;;
	attach)
		shift
		attach_func "$@"
		;;
	check-service)
		shift
		checkservice_func "$@"
		;;
	clone)
		shift
		clone_func "$@"
		;;
	deactivate)
		shift
		deactivate_func "$@"
		;;
	define)
		shift
		define_func "$@"
		;;
	getmac)
		shift
		getmac_func "$@"
		;;
	ping)
		shift
		ping_func "$@"
		;;
	reboot)
		shift
		reboot_func "$@"
		;;
	*)
		show_usage help
		;;
esac
